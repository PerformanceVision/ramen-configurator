-- vim: ft=sql expandtab
-- Meta-Monitoring

PARAMETERS
  -- How long to gather data before outputing
  -- Should be > 1min since the 1min avg varies a lot with
  -- ~1min CSVs.
  time_step DEFAULT TO 5min,
  -- Since we have 1hour aggregates we cannot be too picky:
  max_event_time_spread DEFAULTS TO 7200s;

DEFINE stats AS
  LISTEN FOR INSTRUMENTATION;

-- Checks the global number of output tuples and running/active programs
-- per minute
DEFINE resampled
  "Per time-step statistics about every worker."
AS
  FROM stats
  WHERE not (worker starts with "monitoring/meta/")
  SELECT
    worker,
    (start // time_step) * time_step AS start,
    out.start + time_step AS stop,

    max max_event_time AS max_event_time
      "Largest event time emitted so far",

    max tuples_in AS tuples_in,
    (out.tuples_in - min tuples_in) / time_step AS in_per_sec
      "Number of received tuples per seconds.",

    max tuples_selected AS tuples_selected,
     (out.tuples_selected - min tuples_selected) / time_step AS selected_per_sec
      "Number of received tuples passing the WHERE filter per seconds.",

    max tuples_out AS tuples_out,
    (out.tuples_out - min tuples_out) / time_step AS out_per_sec
      "Number of produced tuples per seconds.",

    max groups AS groups
      "Peak number of active groups.",

    max cpu AS cpu,
    (out.cpu - min cpu) / time_step AS cpu_per_sec
      "Average number of CPU seconds consummed per seconds.",
    max ram AS ram "Peak number of bytes allocated on the heap.",

    max wait_in AS wait_in,
    (out.wait_in - min wait_in) / time_step AS wait_in_per_sec
      "Average time spent waiting for parent.",

    max wait_out AS wait_out,
    (out.wait_out - min wait_out) / time_step AS wait_out_per_sec
      "Average time spent waiting for children.",

    max bytes_in AS bytes_in,
    (out.bytes_in - min bytes_in) / time_step AS bytes_in_per_sec
      "Average amount of bytes read.",

    max bytes_out AS bytes_out,
    (out.bytes_out - min bytes_out) / time_step AS bytes_out_per_sec
      "Average number of bytes written.",

    min age last_out AS last_out_age
      "Time elapsed since last production."

  GROUP BY worker, start // time_step
  COMMIT AFTER in.start - out.start > 2min
  FACTOR worker;

DEFINE tot_resampled
  "Global statistics about total work done."
AS
  FROM resampled
  SELECT
    start, stop,
    sum 1 {processes} AS running "Total number of running worker.",
    -- Given data arrive only every minute in the test lab (and some datasets
    -- are frequently missed), let's call "active" any operation that had
    -- output anything for the last *3* minutes:
    sum u32(COALESCE(last_out_age <= 3min, false)) {processes} AS active
      "Number of workers that have produced at least a tuple in the last 3 minutes.",
    sum COALESCE(out_per_sec, 0) AS tot_out_per_sec
      "Number of produced tuples by all workers so far.",

    min max_event_time AS min_event_time
      "Oldest max_event_time amongst all workers.",
    max max_event_time AS max_event_time
      "Latest max_event_time amongst all workers."
  GROUP BY true
  COMMIT BEFORE out.start <> lag out.start ;

-- Alerts: many of the above are supposed to stay mostly constant. Therefore,
-- notify when the last value is off compared to the moving average:

DEFINE alert_output AS
  FROM tot_resampled
  SELECT
    *,

    moveavg(10, tot_out_per_sec) AS avg_tot_out_per_sec,
    abs (avg_tot_out_per_sec - tot_out_per_sec) AS _d_out,
    min (_d_out, avg_tot_out_per_sec) / max (_d_out, avg_tot_out_per_sec)
      AS diff_out_per_sec,

    moveavg(10, running) AS avg_running,
    abs (avg_running - running) AS _d_running,
    min (_d_running, avg_running) / max (_d_running, avg_running) AS diff_running,

    moveavg(10, active) AS avg_active,
    abs (avg_active - active) AS _d_active,
    min (_d_active, avg_active) / max (_d_active, avg_active) AS diff_active,

    diff_out_per_sec + diff_running + diff_active AS tot_diff;

DEFINE alert_output_do_notif AS
  FROM alert_output
  SELECT tot_diff > 0.75 AS firing
  NOTIFY "Internal - Output changed" WITH
    firing,
    0.1 AS certainty,
    "Large variations in ramen number of output tuples" AS desc
  AFTER firing != COALESCE(previous.firing, false);

-- Also alert when the difference between the max event times is too large:
DEFINE alert_event_times AS
  FROM tot_resampled
  SELECT
    start, stop,
    COALESCE(max_event_time - min_event_time, 0) AS event_time_spread
      "Duration between oldest and latest max_event_time",
    NOT (HYSTERESIS(event_time_spread,
                    0.8 * max_event_time_spread,
                    max_event_time_spread)) AS firing
  NOTIFY "Internal - Late workers" WITH
    firing,
    0.1 * reldiff(event_time_spread, max_event_time_spread) AS certainty,
    "The diference between oldest (${min_event_time}) and latest (${max_event_time}) event times is too large"
      AS desc,
    event_time_spread AS values,
    max_event_time_spread AS thresholds
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);
