-- vim: ft=sql expandtab
-- Track the top services by number of distinct client hosts (approximate),
-- and aggregate all possible metrics every minutes, per server and "protocol"
-- (ie. CSV file, not protostack, although that might be worth a try).

PARAMETERS
  top_size DEFAULT TO 100,
  top_duration DEFAULT TO 1h,
  time_step DEFAULT TO 1min,
  false_pos_rate DEFAULT TO 0.1;

RUN IF
  COALESCE(
    variant("extra_tables") = "all" AND (
      time_step <= 1min OR
      time_step <= 10min AND variant("run_time_steps") IN ["up_to_10min"; "up_to_1hour"] OR
      variant("what_time_steps") = "up_to_1hour"
    ), false);

-- We need to make all CSV similar before merging them:

DEFINE tcp_services AS
  FROM ../../../csv/tcp
  SELECT
    start, stop,
    COALESCE(vlan_server, vlan_client, 0) AS vlan,
    ip_client, ip_server, port_server,
    "TCP" as protocol,
    traffic_packets_client, traffic_packets_server,
    traffic_bytes_client, traffic_bytes_server,
    payload_packets_client, payload_packets_server,
    rtt_count_client, rtt_count_server,
    rtt_sum_client, rtt_sum_server,
    rd_count_client, rd_count_server,
    rt_count_server, rt_sum_server,
    syn_count_client AS syns,
    ct_count AS connections,
    zero_window_count_server;

DEFINE udp_services AS
  FROM ../../../csv/udp
  SELECT
    start, stop,
    COALESCE(vlan_server, vlan_client, 0) AS vlan,
    ip_client, ip_server, port_server,
    "UDP" as protocol,
    traffic_packets_client, traffic_packets_server,
    traffic_bytes_client, traffic_bytes_server,
    payload_packets_client, payload_packets_server,
    rtt_count_client, rtt_count_server,
    rtt_sum_client, rtt_sum_server,
    rd_count_client, rd_count_server,
    0u32 {packets} AS rt_count_server,
    0. {seconds} AS rt_sum_server,
    0u32 {packets} AS syns,
    0u32 {packets} AS connections,
    0u32 {packets} AS zero_window_count_server;

-- Merge all possible CSV together
DEFINE degraded AS
  FROM
    tcp_services, udp_services
  MERGE TIMEOUT AFTER 5s
  WHERE start > merge.greatest.start - 3min
  SELECT
    *,
    NOT REMEMBER (
      false_pos_rate,
      start, -- time
      1h, -- memory duration
      -- What to remember:
      vlan, ip_server, port_server, protocol, ip_client
    ) AS is_new_client,
    -- nullifies the service identity if not important:
    IS vlan, ip_server, port_server, protocol IN TOP top_size OVER top_size*5
      BY u32(is_new_client)
      AT TIME start FOR THE LAST top_duration
      AS _important,
    -- Note: This would fail to typecheck with the internal typechecker
    -- without the casts around the NULLs because of a bug in CASE/NULL:
    -- NULL is not constrained and will eventually be assigned the bool type.
    -- Whereas with the external typechecker the else clause is constrained
    -- to have the same type as the CASE.
    IF _important THEN vlan ELSE u32(NULL) AS vlan,
    IF _important THEN ip_server ELSE ip(NULL) AS ip,
    IF _important THEN port_server ELSE u16(NULL) AS port,
    IF _important THEN protocol ELSE string(NULL) AS protocol;

-- Aggregate on service, per minute:
DEFINE top
  "Per minute statistics about the most important services (per number of clients)."
AS
  FROM degraded
  GROUP BY vlan, ip, port, protocol, start // time_step
  SELECT
    vlan, ip, port,
    protocol DOC "IP protocol.",

    sum u32(is_new_client) * (1 + false_pos_rate) AS clients
      "Approximate number of distinct clients for this service.",

    -- Time info
    min start AS _min_start,
    (_min_start // time_step) * time_step AS start,
    out.start + time_step AS stop,

    -- Volumetry
    sum traffic_packets_client AS packets_from_client,
    sum traffic_packets_server AS packets_from_server,
    sum traffic_bytes_client AS bytes_from_client,
    sum traffic_bytes_server AS bytes_from_server,
    sum payload_packets_client AS packets_with_tcp_payload_from_client,
    sum payload_packets_server AS packets_with_tcp_payload_from_server,

    -- Response Times
    sum rt_sum_server / sum rt_count_server AS avg_response_time
      "Average response time.",
    -- Also try to retain an idea of what the min/max had been:
    rt_sum_server / rt_count_server AS _avg_response_time,
    min _avg_response_time DOC "Approximate minimum response time.",
    max _avg_response_time DOC "Approximate maximum response time.",
    -- Also some percentiles (of the avgs!):
    90th percentile (sample(1000, _avg_response_time)) as avg_response_time_90th
      "Approximate 90th percentile of response times.",
    95th percentile (sample(1000, _avg_response_time)) as avg_response_time_95th
      "Approximate 95th percentile of response times.",
    99th percentile (sample(1000, _avg_response_time)) as avg_response_time_99th
      "Approximate 99th percentile of response times.",

    -- RTT from client
    sum rtt_sum_client / sum rtt_count_client
      AS avg_rtt_from_client "Average client→server→client round trip time.",
    -- RTT from server
    sum rtt_sum_server / sum rtt_count_server
      AS avg_rtt_from_server "Average server→client→server round trip time.",

    -- RR: ratio of retransmitted packets over packets with payload
    sum rd_count_client / sum packets_with_tcp_payload_from_client
      AS avg_rr_from_client
      "Ratio of retransmitted packets over packets with payload, from clients.",
    -- RR: server -> client
    sum rd_count_server / sum packets_with_tcp_payload_from_server
      AS avg_rr_from_server
      "Ratio of retransmitted packets over packets with payload, from servers.",

    -- Connections
    sum syns / time_step AS syns "SYN flags per second.",
    sum connections / time_step AS connections "Connections per second.",
    syns / connections AS syns_per_connections "Ratio of SYNs per connection.",

    -- 0 window events
    sum zero_window_count_server / time_step AS zero_windows
      "0-window events per second.",
    out.zero_windows / packets_with_tcp_payload_from_server
      AS zero_windows_per_pauyload_packets
      "Ratio of 0-window events per packets with payload."

  COMMIT AFTER in.start > out.start + time_step * 1.3
  FACTORS vlan, port, protocol;
