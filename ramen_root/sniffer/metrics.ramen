-- vim: ft=sql expandtab

-- CSV come with all kind of types and field discrepencies.
-- First, we want to cast all those types into proper ramen types.
-- Then, we are going to sum tcp, udp, and all other metrics that
-- together form the whole traffic, so that we can compute the volumetry
-- and assess the overall quality of services.
-- Unfortunately, only TCP comes with any metric that bear any relation to
-- quality of service. We blanks these metrics for other sources below:

DEFINE PERSIST FOR 15min tcp AS
  FROM ../csv/tcp, ../chb/tcp
  SELECT
    "tcp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN peek u128 ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (ct_sum / 1e6) {seconds} AS ct_sum,
    (ct_square_sum / 1e12) {seconds^2} AS ct_square_sum,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (rtt_sum_client / 1e6) {seconds} AS rtt_sum_client,
    (rtt_square_sum_client / 1e12) {seconds^2} AS rtt_square_sum_client,
    (rtt_sum_server / 1e6) {seconds} AS rtt_sum_server,
    (rtt_square_sum_server / 1e12) {seconds^2} AS rtt_square_sum_server,
    (rd_sum_client / 1e6) {seconds} AS rd_sum_client,
    (rd_square_sum_client / 1e12) {seconds^2} AS rd_square_sum_client,
    (rd_sum_server / 1e6) {seconds} AS rd_sum_server,
    (rd_square_sum_server / 1e12) {seconds^2} AS rd_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *; -- -ip4_client -ip6_client etc

DEFINE PERSIST FOR 15min udp AS
  FROM ../csv/udp, ../chb/udp
  SELECT
    "udp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN peek u128 ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    -- Also extend it to have some of the same measures as in TCP:
    -- (Note: Shouldn't we be able to cram at least an RTT in here, from
    -- the many UDP protocols that are supported?)
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE PERSIST FOR 15min icmp AS
  FROM ../csv/icmp, ../chb/icmp
  SELECT
    "icmp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN peek u128 ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    COALESCE(ip(error_ip4_client), ip(peek u128 error_ip6_client), 0.0.0.0) AS error_ip_client,
    COALESCE(ip(error_ip4_server), ip(peek u128 error_ip6_server), 0.0.0.0) AS error_ip_server,
    -- Also extend with no data.
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_client AS payload_bytes_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE PERSIST FOR 15min 'other-ip' AS
  FROM '../csv/other-ip', '../chb/other-ip'
  SELECT
    "other-ip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_server AS payload_bytes_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE PERSIST FOR 15min 'non-ip' AS
  FROM '../csv/non-ip', '../chb/non-ip'
  SELECT
    "non-ip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_server AS payload_bytes_server,
    *;

DEFINE PERSIST FOR 15min dns AS
  FROM ../csv/dns, ../chb/dns
  SELECT
    "dns" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    *;

DEFINE PERSIST FOR 15min http AS
  FROM ../csv/http, ../chb/http
  SELECT
    "http" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    COALESCE(ip(ip4_orig_client), ip(peek u128 ip6_orig_client), 0.0.0.0) AS ip_orig_client,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (tot_begin / 1e6) {seconds(rel)} AS tot_begin,
    (tot_end / 1e6) {seconds(rel)} AS tot_end,
    (tot_load_time / 1e6) {seconds} AS tot_load_time,
    (tot_load_time_squared / 1e12) {seconds^2} AS tot_load_time_squared,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE PERSIST FOR 15min citrix_channels AS
  FROM ../csv/citrix_channels, ../chb/citrix_channels
  SELECT
    "citrix-channels" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE PERSIST FOR 15min citrix AS
  FROM ../csv/citrix, ../chb/citrix
  SELECT
    "citrix" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    (login_time_sum / 1e6) {seconds} AS login_time_sum,
    (login_time_square_sum / 1e12) {seconds^2} AS login_time_square_sum,
    (launch_time_sum / 1e6) {seconds} AS launch_time_sum,
    (launch_time_square_sum / 1e12) {seconds^2} AS launch_time_square_sum,
    *;

DEFINE PERSIST FOR 15min smb AS
  FROM ../csv/smb, ../chb/smb
  SELECT
    "smb" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE PERSIST FOR 15min sql AS
  FROM ../csv/sql, ../chb/sql
  SELECT
    "sql" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE PERSIST FOR 15min voip AS
  FROM ../csv/voip, ../chb/voip
  SELECT
    "voip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    COALESCE(ip(ip4_caller), ip(peek u128 ip6_caller), 0.0.0.0) AS ip_caller,
    eth(caller_mac) AS mac_caller,
    COALESCE(ip(ip4_callee), ip(peek u128 ip6_callee), 0.0.0.0) AS ip_callee,
    eth(callee_mac) AS mac_callee,
    (rtp_duration / 1e6) {seconds} AS rtp_duration,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (jitter_sum_caller / 1e6) {seconds} AS jitter_sum_caller,
    (jitter_square_sum_caller / 1e12) {seconds^2} AS jitter_square_sum_caller,
    (jitter_sum_callee / 1e6) {seconds} AS jitter_sum_callee,
    (jitter_square_sum_callee / 1e12) {seconds^2} AS jitter_square_sum_callee,
    (rtt_sum_caller / 1e6) {seconds} AS rtt_sum_caller,
    (rtt_square_sum_caller / 1e12) {seconds^2} AS rtt_square_sum_caller,
    (rtt_sum_callee / 1e6) {seconds} AS rtt_sum_callee,
    (rtt_square_sum_callee / 1e12) {seconds^2} AS rtt_square_sum_callee,
    (sign_rtt_sum_client / 1e6) {seconds} AS sign_rtt_sum_client,
    (sign_rtt_square_sum_client / 1e12) {seconds^2} AS sign_rtt_square_sum_client,
    (sign_rtt_sum_server / 1e6) {seconds} AS sign_rtt_sum_server,
    (sign_rtt_square_sum_server / 1e12) {seconds^2} AS sign_rtt_square_sum_server,
    (sign_rd_sum_client / 1e6) {seconds} AS sign_rd_sum_client,
    (sign_rd_square_sum_client / 1e12) {seconds^2} AS sign_rd_square_sum_client,
    (sign_rd_sum_server / 1e6) {seconds} AS sign_rd_sum_server,
    (sign_rd_square_sum_server / 1e12) {seconds^2} AS sign_rd_square_sum_server,
    *;

DEFINE PERSIST FOR 15min tls AS
  FROM ../csv/tls, ../chb/tls
  SELECT
    "tls" AS metric,
    (capture_begin / 1e6) {seconds} AS start,
    (capture_end / 1e6) {seconds} AS stop,
    COALESCE(ip(ip4_client), ip(peek u128 ip6_client), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(peek u128 ip6_server), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    bool(resumed) AS resumed,
    bool(decrypted) AS decrypted,
    (ct_sum / 1e6) {seconds} AS ct_sum,
    (ct_square_sum / 1e12) {seconds^2} AS ct_square_sum,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;
