-- vim: ft=sql expandtab

PARAMETERS
  csv_prefix DEFAULTS TO "/srv/nova/ramen/*.*.",
  csv_compressed DEFAULTS TO false,
  csv_delete DEFAULTS TO true;

DEFINE tcp_raw AS
  READ FROM
    FILES csv_prefix || "tcp_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     ip4_external u32?,
     ip6_external i128?,
     port_client u16,
     port_server u16,
     diffserv_client u8,                -- 20
     diffserv_server u8,
     os_client u8?,
     os_server u8?,
     mtu_client u32? {bytes},
     mtu_server u32? {bytes},
     captured_pcap string?,
     application u32,
     protostack string?,
     uuid string?,
     traffic_bytes_client u64 {bytes},  -- 30
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32,
     traffic_packets_server u32,
     payload_bytes_client u64 {bytes},
     payload_bytes_server u64 {bytes},
     payload_packets_client u32,
     payload_packets_server u32,
     retrans_traffic_bytes_client u64? {bytes},
     retrans_traffic_bytes_server u64? {bytes},
     retrans_payload_bytes_client u64? {bytes}, -- 40
     retrans_payload_bytes_server u64? {bytes},
     syn_count_client u32? {},
     fin_count_client u32? {},
     fin_count_server u32? {},
     rst_count_client u32? {},
     rst_count_server u32? {},
     timeout_count u32 {},
     close_count u32? {},
     dupack_count_client u32? {},
     dupack_count_server u32? {},-- 50
     zero_window_count_client u32? {},
     zero_window_count_server u32? {},
     -- Some counts can be null although the sums cannot ...
     ct_count u32? {},
     ct_sum u64 {microseconds},
     ct_square_sum u128 {microseconds^2},
     rt_count_server u32? {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     rtt_count_client u32? {},
     rtt_sum_client u64 {microseconds}, -- 60
     rtt_square_sum_client u128 {microseconds^2},
     rtt_count_server u32? {},
     rtt_sum_server u64 {microseconds},
     rtt_square_sum_server u128 {microseconds^2},
     rd_count_client u32? {},
     rd_sum_client u64 {microseconds},
     rd_square_sum_client u128 {microseconds^2},
     rd_count_server u32? {},
     rd_sum_server u64 {microseconds},
     rd_square_sum_server u128 {microseconds^2},-- 70
     dtt_count_client u32? {},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32? {},
     dtt_sum_server u64 {microseconds},
     dtt_square_sum_server u128 {microseconds^2},
     dcerpc_uuid string?)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

-- CSV come with all kind of types and field discrepencies.
-- First, we want to cast all those types into proper ramen types.
-- Then, we are going to sum tcp, udp, and all other metrics that
-- together form the whole traffic, so that we can compute the volumetry
-- and assess the overall quality of services.
-- Unfortunately, only TCP comes with any metric that bear any relation to
-- quality of service. We blanks these metrics for other sources below:

DEFINE tcp AS
  FROM tcp_raw
  SELECT
    "tcp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (ct_sum / 1e6) {seconds} AS ct_sum,
    (ct_square_sum / 1e12) {seconds^2} AS ct_square_sum,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (rtt_sum_client / 1e6) {seconds} AS rtt_sum_client,
    (rtt_square_sum_client / 1e12) {seconds^2} AS rtt_square_sum_client,
    (rtt_sum_server / 1e6) {seconds} AS rtt_sum_server,
    (rtt_square_sum_server / 1e12) {seconds^2} AS rtt_square_sum_server,
    (rd_sum_client / 1e6) {seconds} AS rd_sum_client,
    (rd_square_sum_client / 1e12) {seconds^2} AS rd_square_sum_client,
    (rd_sum_server / 1e6) {seconds} AS rd_sum_server,
    (rd_square_sum_server / 1e12) {seconds^2} AS rd_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    -- Also fix NULL counters:
    COALESCE(ct_count, 0) AS ct_count,
    COALESCE(close_count, 0) AS close_count,
    COALESCE(rt_count_server, 0) AS rt_count_server,
    COALESCE(rtt_count_client, 0) AS rtt_count_client,
    COALESCE(rtt_count_server, 0) AS rtt_count_server,
    COALESCE(rd_count_client, 0) AS rd_count_client,
    COALESCE(rd_count_server, 0) AS rd_count_server,
    COALESCE(dtt_count_client, 0) AS dtt_count_client,
    COALESCE(dtt_count_server, 0) AS dtt_count_server,
    COALESCE(dupack_count_client, 0) AS dupack_count_client,
    COALESCE(dupack_count_server, 0) AS dupack_count_server,
    COALESCE(zero_window_count_client, 0) AS zero_window_count_client,
    COALESCE(zero_window_count_server, 0) AS zero_window_count_server,
    COALESCE(syn_count_client, 0) AS syn_count_client,
    COALESCE(rst_count_client, 0) AS rst_count_client,
    COALESCE(rst_count_server, 0) AS rst_count_server,
    COALESCE(fin_count_client, 0) AS fin_count_client,
    COALESCE(fin_count_server, 0) AS fin_count_server,
    COALESCE(retrans_traffic_bytes_client, 0) AS retrans_traffic_bytes_client,
    COALESCE(retrans_traffic_bytes_server, 0) AS retrans_traffic_bytes_server,
    COALESCE(retrans_payload_bytes_client, 0) AS retrans_payload_bytes_client,
    COALESCE(retrans_payload_bytes_server, 0) AS retrans_payload_bytes_server,
    *; -- -ip4_client -ip6_client etc

DEFINE udp_raw AS
  READ FROM
    FILES csv_prefix || "udp_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
       SEPARATOR "\t"
       NULL "<NULL>"
       NO QUOTES
       ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     ip4_external u32?,
     ip6_external i128?,
     port_client u16,
     port_server u16,
     diffserv_client u8,                -- 20
     diffserv_server u8,
     mtu_client u32? {bytes},
     mtu_server u32? {bytes},
     application u32,
     protostack string?,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32,
     traffic_packets_server u32,
     payload_bytes_client u64 {bytes},   -- 30
     payload_bytes_server u64 {bytes},
     dcerpc_uuid string?)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE udp AS
  FROM udp_raw
  SELECT
    "udp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    -- Also extend it to have some of the same measures as in TCP:
    -- (Note: Shouldn't we be able to cram at least an RTT in here, from
    -- the many UDP protocols that are supported?)
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE icmp_raw AS
  READ FROM
    FILES csv_prefix || "icmp_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     ip4_external u32?,
     ip6_external i128?,
     diffserv_client u8,
     diffserv_server u8,
     mtu_client u32? {bytes},           -- 20
     mtu_server u32? {bytes},
     application u32,
     protostack string?,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32,
     traffic_packets_server u32,
     icmp_type u8,
     icmp_code u8,
     error_ip4_client u32?,             -- 30
     error_ip6_client i128?,
     error_ip4_server u32?,
     error_ip6_server i128?,
     error_port_client u16?,
     error_port_server u16?,
     error_ip_proto u8?,
     error_zone_client u32?,
     error_zone_server u32?)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE icmp AS
  FROM icmp_raw
  SELECT
    "icmp" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    IF ip4_external IS NULL THEN ip6_external ELSE ip4_external AS ip_external,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    COALESCE(ip(error_ip4_client), ip(u128(error_ip6_client)), 0.0.0.0) AS error_ip_client,
    COALESCE(ip(error_ip4_server), ip(u128(error_ip6_server)), 0.0.0.0) AS error_ip_server,
    -- Also extend with no data.
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_client AS payload_bytes_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE 'other-ip_raw' AS
  READ FROM
    FILES csv_prefix || "other_ip_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     diffserv_client u8,
     diffserv_server u8,
     mtu_client u32? {bytes},
     mtu_server u32? {bytes},
     ip_protocol u8,                    -- 20
     application u32,
     protostack string?,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32,
     traffic_packets_server u32)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE 'other-ip' AS
  FROM 'other-ip_raw'
  SELECT
    "other-ip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_server AS payload_bytes_server,
    u32(0) {} AS rtt_count_client,
    0. {seconds} AS rtt_sum_client,
    u32(0) {} AS rtt_count_server,
    0. {seconds} AS rtt_sum_server,
    u32(0) {} AS rd_count_client,
    u32(0) {} AS rd_count_server,
    *;

DEFINE 'non-ip_raw' AS
  READ FROM
    FILES csv_prefix || "non_ip_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     mtu_client u32? {bytes},
     mtu_server u32? {bytes},
     eth_type u16,
     application u32,
     protostack string?,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32,
     traffic_packets_server u32)        -- 20
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE 'non-ip' AS
  FROM 'non-ip_raw'
  SELECT
    "non-ip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    traffic_packets_client AS payload_packets_client,
    traffic_packets_server AS payload_packets_server,
    traffic_bytes_client AS payload_bytes_client,
    traffic_bytes_server AS payload_bytes_server,
    *;

DEFINE dns_raw AS
  READ FROM
    FILES csv_prefix || "dns_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     query_name string,
     query_type u16,
     query_class u16,
     error_code u8,
     error_count u32 {},                -- 20
     answer_type u16,
     answer_class u16,
     capture_file string?,
     connection_uuid string?,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     traffic_packets_client u32 {},
     traffic_packets_server u32 {},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},       -- 30
     rt_square_sum_server u128 {microseconds^2})
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE dns AS
  FROM dns_raw
  SELECT
    "dns" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    -- For some reason DNS is the only CSV with no application.
    -- 0 is the special "N.C." application:
    0u32 AS application,
    *;

DEFINE http_raw AS
  READ FROM
    FILES csv_prefix || "http_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     connection_uuid string?,
     id string,
     parent_id string,                  -- 20
     referrer_id string?,
     deep_inspect bool,
     contributed bool,
     timeouted bool,
     host string?,
     user_agent string?,
     url string,
     server string?,
     compressed bool,
     chunked_encoding bool,             -- 30
     ajax bool,
     ip4_orig_client u32?,
     ip6_orig_client i128?,
     page_count u32 {},  -- 0 or 1 iff a page
     _hardcoded_one_facepalm bool,
     query_begin u64 {microseconds},
     query_end u64 {microseconds},
     query_method u8,
     query_headers u32 {bytes},
     query_payload u32 {bytes},         -- 40
     query_pkts u32,
     query_content string?,
     query_content_length u32? {bytes},
     query_content_length_count u32 {},
     query_mime_type string?,
     resp_begin u64? {microseconds},
     resp_end u64? {microseconds},
     resp_code u32?,
     resp_headers u32 {bytes},
     resp_payload u32 {bytes},          -- 50
     resp_pkts u32,
     resp_content string?,
     resp_content_length u32? {bytes},
     resp_content_length_count u32 {},
     resp_mime_type string?,
     tot_volume_query u32? {bytes},
     tot_volume_response u32? {bytes},
     tot_count u32 {}, -- aka page_hit_count
     tot_errors u16 {},
     tot_timeouts u16 {},       -- 60
     tot_begin u64 {microseconds},
     tot_end u64 {microseconds},
     tot_load_time u64 {microseconds},
     tot_load_time_squared u128 {microseconds^2},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_sum_server u64 {microseconds}, -- 70
     dtt_square_sum_server u128 {microseconds^2},
     application u32)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE http AS
  FROM http_raw
  SELECT
    "http" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    COALESCE(ip(ip4_orig_client), ip(u128(ip6_orig_client)), 0.0.0.0) AS ip_orig_client,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (tot_begin / 1e6) {seconds(rel)} AS tot_begin,
    (tot_end / 1e6) {seconds(rel)} AS tot_end,
    (tot_load_time / 1e6) {seconds} AS tot_load_time,
    (tot_load_time_squared / 1e12) {seconds^2} AS tot_load_time_squared,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE citrix_raw AS
  READ FROM
    FILES csv_prefix || "citrix_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     application u32,
     protostack string?,
     connection_uuid string?,           -- 20
     channel_id u8?,
     channel u8?,
     pdus_client u32 {pdus},
     pdus_server u32 {pdus},
     num_compressed_client u32,
     num_compressed_server u32,
     payloads_client u32 {bytes},
     payloads_server u32 {bytes},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},  -- 30
     rt_square_sum_server u128 {microseconds^2},
     dtt_count_client u32 {},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32 {},
     dtt_sum_server u64 {microseconds},
     dtt_square_sum_server u128 {microseconds^2},
     username string?,
     domain string?,
     citrix_application string?)        -- 40
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE citrix_channels AS
  FROM citrix_raw
  SELECT
    "citrix-channels" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE citrix_chanless_raw AS
  READ FROM
    FILES csv_prefix || "citrix_chanless_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     application u32,
     protostack string?,
     connection_uuid string?,           -- 20
     module_name string?,
     encrypt_type u8,
     pdus_client u32,
     pdus_server u32,
     pdus_cgp_client u32,
     pdus_cgp_server u32,
     num_keep_alives_client u32,
     num_keep_alives_server u32,
     payloads_client u32 {bytes},
     payloads_server u32 {bytes},       -- 30
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     dtt_count_client u32 {},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32 {},
     dtt_sum_server u64 {microseconds},
     dtt_square_sum_server u128 {microseconds^2},
     login_time_count u32 {},
     login_time_sum u64 {microseconds},
     login_time_square_sum u128 {microseconds^2},-- 40
     launch_time_count u32 {},
     launch_time_sum u64 {microseconds},
     launch_time_square_sum u128 {microseconds^2},
     num_aborts u32 {},
     num_timeouts u32 {},
     username string?,
     domain string?,
     citrix_application string?)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE citrix AS
  FROM citrix_chanless_raw
  SELECT
    "citrix" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    (login_time_sum / 1e6) {seconds} AS login_time_sum,
    (login_time_square_sum / 1e12) {seconds^2} AS login_time_square_sum,
    (launch_time_sum / 1e6) {seconds} AS launch_time_sum,
    (launch_time_square_sum / 1e12) {seconds^2} AS launch_time_square_sum,
    *;

DEFINE smb_raw AS
  READ FROM
    FILES csv_prefix || "smb_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     version u32,
     protostack string?,
     user string?,                      -- 20
     domain string?,
     file_id u128?,
     path string?,
     tree_id u32?,
     tree string?,
     status u32?,
     command u32,
     subcommand u32?,
     timeouted bool,
     is_error bool,                     -- 30
     is_warning bool,
     _hardcoded_one_facepalm bool,
     connection_uuid string?,
     query_begin u64,
     query_end u64,
     query_payload u32 {bytes},
     query_pkts u32,
     resp_begin u64?,
     resp_end u64?,
     resp_payload u32 {bytes},          -- 40
     resp_pkts u32,
     meta_read_bytes u32 {bytes},
     meta_write_bytes u32 {bytes},
     query_write_bytes u32 {bytes},
     resp_read_bytes u32 {bytes},
     resp_write_bytes u32 {bytes},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     dtt_count_client u32 {},              -- 50
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32 {},
     dtt_sum_server u64 {microseconds},
     dtt_square_sum_server u128 {microseconds^2},
     application u32)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE smb AS
  FROM smb_raw
  SELECT
    "smb" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE sql_raw AS
  READ FROM
    FILES csv_prefix || "sql_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     query string,
     timeouted bool,
     protostack string?,                -- 20
     user string?,
     dbname string?,
     error_sql_status string?,
     error_code string?,
     error_msg string?,
     is_error bool,
     _hardcoded_one_facepalm bool,
     command u32?,
     connection_uuid string?,
     query_begin u64,                -- 30
     query_end u64,
     query_payload u32 {bytes},
     query_pkts u32,
     resp_begin u64?,
     resp_end u64?,
     resp_payload u32 {bytes},
     resp_pkts u32,
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},-- 40
     dtt_count_client u32 {},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32 {},
     dtt_sum_server u64 {microseconds},
     dtt_square_sum_server u128 {microseconds^2},
     application u32)
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE sql AS
  FROM sql_raw
  SELECT
    "sql" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    (query_begin / 1e6) {seconds(rel)} AS query_begin,
    (query_end / 1e6) {seconds(rel)} AS query_end,
    (resp_begin / 1e6) {seconds(rel)} AS resp_begin,
    (resp_end / 1e6) {seconds(rel)} AS resp_end,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    *;

DEFINE voip_raw AS
  READ FROM
    FILES csv_prefix || "voip_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     capture_file string?,
     application u32,
     protostack string?,                -- 20
     connection_uuid string?,
     ip_protocol u8,
     had_voice bool,
     call_direction_is_out bool?,
     last_call_state u8,
     is_starting bool,
     is_finished bool,
     _hardcoded_0 bool,
     last_error u32,
     call_id string,                    -- 30
     rtp_duration u64?,
     id_caller string,
     caller_mac u64,
     ip4_caller u32?,
     ip6_caller i128?,
     zone_caller u32,
     caller_codec string?,
     id_callee string,
     callee_mac u64,
     ip4_callee u32?,                   -- 40
     ip6_callee i128?,
     zone_callee u32,
     callee_codec string?,
     sign_bytes_client u32 {bytes},
     sign_bytes_server u32 {bytes},
     sign_count_client u32 {},
     sign_count_server u32 {},
     sign_payload_client u32 {bytes},
     sign_payload_server u32 {bytes},
     -- v29 specs say these are client/server but junkie seems to do the right
     -- thing here, that is: callee/caller:
     rtp_rtcp_bytes_caller u32 {bytes}, -- 50
     rtp_rtcp_bytes_callee u32 {bytes},
     rtp_rtcp_count_caller u32 {},
     rtp_rtcp_count_callee u32 {},
     rtp_rtcp_payload_caller u32 {bytes},
     rtp_rtcp_payload_callee u32 {bytes},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     jitter_count_caller u32 {},
     jitter_sum_caller u64 {microseconds},-- 60
     jitter_square_sum_caller u128 {microseconds^2},
     jitter_count_callee u32 {},
     jitter_sum_callee u64 {microseconds},
     jitter_square_sum_callee u128 {microseconds^2},
     rtt_count_caller u32 {},
     rtt_sum_caller u64 {microseconds},
     rtt_square_sum_caller u128 {microseconds^2},
     rtt_count_callee u32 {},
     rtt_sum_callee u64 {microseconds},
     rtt_square_sum_callee u128 {microseconds^2},-- 70
     loss_callee2caller_alt_count u32 {},
     loss_caller2callee_alt_count u32 {},
     sign_rtt_count_client u32 {},
     sign_rtt_sum_client u64 {microseconds},
     sign_rtt_square_sum_client u128 {microseconds^2},
     sign_rtt_count_server u32 {},
     sign_rtt_sum_server u64 {microseconds},
     sign_rtt_square_sum_server u128 {microseconds^2},
     sign_rd_count_client u32 {},
     sign_rd_sum_client u64 {microseconds},-- 80
     sign_rd_square_sum_client u128 {microseconds^2},
     sign_rd_count_server u32 {},
     sign_rd_sum_server u64 {microseconds},
     sign_rd_square_sum_server u128 {microseconds^2})
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE voip AS
  FROM voip_raw
  SELECT
    "voip" AS metric,
    (capture_begin / 1e6) {seconds(rel)} AS start,
    (capture_end / 1e6) {seconds(rel)} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    COALESCE(ip(ip4_caller), ip(u128(ip6_caller)), 0.0.0.0) AS ip_caller,
    eth(caller_mac) AS mac_caller,
    COALESCE(ip(ip4_callee), ip(u128(ip6_callee)), 0.0.0.0) AS ip_callee,
    eth(callee_mac) AS mac_callee,
    (rtp_duration / 1e6) {seconds} AS rtp_duration,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (jitter_sum_caller / 1e6) {seconds} AS jitter_sum_caller,
    (jitter_square_sum_caller / 1e12) {seconds^2} AS jitter_square_sum_caller,
    (jitter_sum_callee / 1e6) {seconds} AS jitter_sum_callee,
    (jitter_square_sum_callee / 1e12) {seconds^2} AS jitter_square_sum_callee,
    (rtt_sum_caller / 1e6) {seconds} AS rtt_sum_caller,
    (rtt_square_sum_caller / 1e12) {seconds^2} AS rtt_square_sum_caller,
    (rtt_sum_callee / 1e6) {seconds} AS rtt_sum_callee,
    (rtt_square_sum_callee / 1e12) {seconds^2} AS rtt_square_sum_callee,
    (sign_rtt_sum_client / 1e6) {seconds} AS sign_rtt_sum_client,
    (sign_rtt_square_sum_client / 1e12) {seconds^2} AS sign_rtt_square_sum_client,
    (sign_rtt_sum_server / 1e6) {seconds} AS sign_rtt_sum_server,
    (sign_rtt_square_sum_server / 1e12) {seconds^2} AS sign_rtt_square_sum_server,
    (sign_rd_sum_client / 1e6) {seconds} AS sign_rd_sum_client,
    (sign_rd_square_sum_client / 1e12) {seconds^2} AS sign_rd_square_sum_client,
    (sign_rd_sum_server / 1e6) {seconds} AS sign_rd_sum_server,
    (sign_rd_square_sum_server / 1e12) {seconds^2} AS sign_rd_square_sum_server,
    *;

DEFINE tls_raw AS
  READ FROM
    FILES csv_prefix || "tls_v29.*csv" || (IF csv_compressed THEN ".lz4" ELSE "")
      PREPROCESSED WITH (IF csv_compressed THEN "lz4 -d -c" ELSE "")
      THEN DELETE IF csv_delete
    AS CSV
      SEPARATOR "\t"
      NULL "<NULL>"
      NO QUOTES
      ESCAPE WITH "\\"
    (poller string,                     -- 1
     capture_begin u64,
     capture_end u64,
     device_client u16?,
     device_server u16?,
     vlan_client u32?,
     vlan_server u32?,
     mac_client u64?,
     mac_server u64?,
     zone_client u32,                   -- 10
     zone_server u32,
     ip4_client u32?,
     ip6_client i128?,
     ip4_server u32?,
     ip6_server i128?,
     port_client u16,
     port_server u16,
     application u32,
     protostack string?,
     connection_uuid string?,           -- 20
     cipher_suite u32?,
     client_common_name string?,
     server_common_name string?,
     server_name string?,
     client_not_after u64? {seconds(rel)},
     server_not_after u64? {seconds(rel)},
     resumed u32, -- actually a bool
     decrypted u32, -- actually a bool
     version u32,
     client_signature string?,          -- 30
     server_signature string?,
     client_type u32?,
     server_type u32?,
     client_bits u32?,
     server_bits u32?,
     meta_client u32 {pdus},
     meta_server u32 {pdus},
     data_client u32,
     data_server u32,
     alert_types u32,                   -- 40
     alert_errors u32,
     traffic_bytes_client u64 {bytes},
     traffic_bytes_server u64 {bytes},
     payload_bytes_client u64 {bytes},
     payload_bytes_server u64 {bytes},
     dtt_count_client u32 {},
     dtt_sum_client u64 {microseconds},
     dtt_square_sum_client u128 {microseconds^2},
     dtt_count_server u32 {},
     dtt_sum_server u64 {microseconds}, -- 50
     dtt_square_sum_server u128 {microseconds^2},
     rt_count_server u32 {},
     rt_sum_server u64 {microseconds},
     rt_square_sum_server u128 {microseconds^2},
     ct_count u32? {},
     ct_sum u64 {microseconds},
     ct_square_sum u128 {microseconds^2})
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE tls AS
  FROM tls_raw
  SELECT
    "tls" AS metric,
    (capture_begin / 1e6) {seconds} AS start,
    (capture_end / 1e6) {seconds} AS stop,
    COALESCE(ip(ip4_client), ip(u128(ip6_client)), 0.0.0.0) AS ip_client,
    COALESCE(ip(ip4_server), ip(u128(ip6_server)), 0.0.0.0) AS ip_server,
    eth(mac_client) AS mac_client,
    eth(mac_server) AS mac_server,
    bool(resumed) AS resumed,
    bool(decrypted) AS decrypted,
    (ct_sum / 1e6) {seconds} AS ct_sum,
    (ct_square_sum / 1e12) {seconds^2} AS ct_square_sum,
    (rt_sum_server / 1e6) {seconds} AS rt_sum_server,
    (rt_square_sum_server / 1e12) {seconds^2} AS rt_square_sum_server,
    (dtt_sum_client / 1e6) {seconds} AS dtt_sum_client,
    (dtt_square_sum_client / 1e12) {seconds^2} AS dtt_square_sum_client,
    (dtt_sum_server / 1e6) {seconds} AS dtt_sum_server,
    (dtt_square_sum_server / 1e12) {seconds^2} AS dtt_square_sum_server,
    -- Also fix NULL counters:
    COALESCE(ct_count, 0) AS ct_count,
    *;
