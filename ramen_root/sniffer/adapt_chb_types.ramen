-- For each input file we have two layers: one that uses the names
-- as defined in the given NamesAndTypes format specifications, and
-- another one that adapts the ever changing names and types for the
-- rest of the data pipeline.

DEFINE LAZY tcp AS
  FROM tcp_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    ip4_external,
    string(ip6_external) AS ip6_external,
    port_client,
    port_server,
    u16(diffserv_client),
    u16(diffserv_server),
    os_client,
    os_server,
    u32(mtu_client) {bytes},
    u32(mtu_server) {bytes},
    captured_pcap,
    application,
    protostack,
    UUID_OF_U128 uuid,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server,
    payload_bytes_client {bytes},
    payload_bytes_server {bytes},
    payload_packets_client,
    payload_packets_server,
    retrans_traffic_bytes_client {bytes},
    retrans_traffic_bytes_server {bytes},
    retrans_payload_bytes_client {bytes},
    retrans_payload_bytes_server {bytes},
    syn_count_client {},
    fin_count_client {},
    fin_count_server {},
    rst_count_client {},
    rst_count_server {},
    close_count {},
    dupack_count_client {},
    dupack_count_server {},
    zero_window_count_client {},
    zero_window_count_server {},
    ct_count {},
    u64(ct_sum) {microseconds},
    u128(ct_square_sum) {microseconds^2},
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    rtt_count_client {},
    u64(rtt_sum_client) {microseconds},
    u128(rtt_square_sum_client) {microseconds^2},
    rtt_count_server {},
    u64(rtt_sum_server) {microseconds},
    u128(rtt_square_sum_server) {microseconds^2},
    rd_count_client {},
    u64(rd_sum_client) {microseconds},
    u128(rd_square_sum_client) {microseconds^2},
    rd_count_server {},
    u64(rd_sum_server) {microseconds},
    u128(rd_square_sum_server) {microseconds^2},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    UUID_OF_U128 dcerpc_uuid
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY udp AS
  FROM udp_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    ip4_external,
    string(ip6_external) AS ip6_external,
    port_client,
    port_server,
    u16(diffserv_client),
    u16(diffserv_server),
    u32(mtu_client) {bytes},
    u32(mtu_server) {bytes},
    application,
    protostack,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server,
    payload_bytes_client {bytes},
    payload_bytes_server {bytes},
    UUID_OF_U128 dcerpc_uuid
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY icmp AS
  FROM icmp_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    ip4_external,
    string(ip6_external) AS ip6_external,
    u16(diffserv_client),
    u16(diffserv_server),
    u32(mtu_client) {bytes},
    u32(mtu_server) {bytes},
    application,
    protostack,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server,
    icmp_type,
    icmp_code,
    error_ip4_client,
    string(error_ip6_client) AS error_ip6_client,
    error_ip4_server,
    string(error_ip6_server) AS error_ip6_server,
    error_port_client,
    error_port_server,
    error_protocol AS error_ip_proto,
    error_zone_client,
    error_zone_server
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY 'other-ip' AS
  FROM 'other-ip_ext' SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    u16(diffserv_client),
    u16(diffserv_server),
    u32?(mtu_client) {bytes},
    u32?(mtu_server) {bytes},
    ip_protocol,
    application,
    protostack,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY 'non-ip' AS
  FROM 'non-ip_ext' SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    u32?(mtu_client) {bytes},
    u32?(mtu_server) {bytes},
    nonip_protocol AS eth_type,
    application,
    protostack,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY dns AS
  FROM dns_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    application,
    protostack,
    query_count,
    query_name,
    u16(query_type),
    u16(query_class),
    u8(rcode) AS error_code,
    error_count {},
    u16(response_type) AS answer_type,
    u16(response_class) AS answer_class,
    captured_pcap AS capture_file,
    string?("") AS connection_uuid,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    traffic_packets_client,
    traffic_packets_server,
    rt_count {} AS rt_count_server,
    u64(rt_sum) {microseconds} AS rt_sum_server,
    u128(rt_square_sum) {microseconds^2} AS rt_square_sum_server
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY http AS
  FROM http_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    string?("") AS connection_uuid,
    UUID_OF_U128 uuid AS id,
    UUID_OF_U128 parent_hit AS parent_id,
    UUID_OF_U128 referrer_hit AS referrer_id,
    is_deep_inspect > 0 AS deep_inspect,
    has_contributed > 0 AS contributed,
    has_timeouted > 0 AS timeouted,
    host,
    user_agent,
    url,
    response_http_server AS server,
    compressed_response_count > 0 AS compressed,
    chunked_encoding_count > 0 AS chunked_encoding,
    ajax_request_count > 0 AS ajax,
    ip4_origin AS ip4_orig_client,
    string(ip6_origin) AS ip6_orig_client,
    u32(page_count) {},
    dtt_count_client,
    query_begin {microseconds},
    query_end {microseconds},
    query_method,
    query_header_bytes {bytes} AS query_headers,
    query_payload_bytes {bytes} AS query_payload,
    query_tcp_packets AS query_pkts,
    query_content_pack AS query_content,
    u32?(query_content_length_sum) {bytes} AS query_content_length,
    u32(query_content_length_count) {} AS query_content_length_count,
    query_mime_type,
    response_begin {microseconds} AS resp_begin,
    response_end {microseconds} AS resp_end,
    response_status AS resp_code,
    response_header_bytes {bytes} AS resp_headers,
    response_payload_bytes {bytes} AS resp_payload,
    response_tcp_packets AS resp_pkts,
    response_content_pack AS resp_content,
    u32?(response_content_length_sum) {bytes} AS resp_content_length,
    u32(response_content_length_count) {} AS resp_content_length_count,
    response_mime_type AS resp_mime_type,
    u32?(page_query_traffic) {bytes} AS tot_volume_query,
    u32?(page_response_traffic) {bytes} AS tot_volume_response,
    u32(page_hit_count) {} AS tot_count,
    page_error_count {} AS tot_errors,
    page_timeout_count {} AS tot_timeouts,
    page_load_begin {microseconds} AS tot_begin,
    page_load_end {microseconds} AS tot_end,
    page_load_time {microseconds} AS tot_load_time,
    u128(page_load_square_time) {microseconds^2} AS tot_load_time_squared,
    u32(dtt_count_server) {} AS rt_count_server,
    u64(hit_rt_sum) {microseconds} AS rt_sum_server,
    u128(hit_rt_square_sum) {microseconds^2} AS rt_square_sum_server,
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    application
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY citrix_channels AS
  FROM citrix_channels_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    application,
    protostack,
    string?("") AS connection_uuid,
    channel_id,
    channel,
    pdus_client {pdus},
    pdus_server {pdus},
    compressed_count_client AS num_compressed_client,
    compressed_count_server AS num_compressed_server,
    payload_bytes_client {bytes} AS payloads_client,
    payload_bytes_server {bytes} AS payloads_server,
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    username,
    domain,
    citrix_application
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY citrix AS
  FROM citrix_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    application,
    protostack,
    string?("") AS connection_uuid,
    module_name,
    encrypt_type,
    pdus_client,
    pdus_server,
    pdus_cgp_client,
    pdus_cgp_server,
    keep_alive_count_client AS num_keep_alives_client,
    keep_alive_count_server AS num_keep_alives_server,
    payload_bytes_client {bytes} AS payloads_client,
    payload_bytes_server {bytes} AS payloads_server,
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    login_time_count {},
    u64(login_time_sum) {microseconds},
    u128(login_time_square_sum) {microseconds^2},
    launch_time_count {},
    u64(launch_time_sum) {microseconds},
    u128(launch_time_square_sum) {microseconds^2},
    abort_count {} AS num_aborts,
    timeout_count {} AS num_timeouts,
    username,
    domain,
    citrix_application
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY smb AS
  FROM smb_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    u32(version),
    protostack,
    smb_user AS user,
    domain,
    u128?(fid) AS file_id,
    path,
    tree_id,
    tree,
    smb_status AS status,
    smb_command AS command,
    smb_subcommand AS subcommand,
    has_timeouted > 0 AS timeouted,
    error_count AS errors,
    warning_count AS warnings,
    query_count AS queries,
    string?("") AS connection_uuid,
    query_begin,
    query_end,
    query_payload_bytes {bytes} AS query_payload,
    query_packets AS query_pkts,
    response_begin AS resp_begin,
    response_end AS resp_end,
    response_payload_bytes {bytes} AS resp_payload,
    response_packets AS resp_pkts,
    metadata_read_bytes {bytes} AS meta_read_bytes,
    metadata_written_bytes {bytes} AS meta_write_bytes,
    query_write_bytes {bytes},
    response_read_bytes {bytes} AS resp_read_bytes,
    response_written_bytes {bytes} AS resp_write_bytes,
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    application
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY sql AS
  FROM sql_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    query,
    has_timeouted > 0 AS timeouted,
    protostack,
    dbuser AS user,
    dbname,
    error_status AS error_sql_status,
    error_code,
    error_message AS error_msg,
    error_count > 0 AS is_error,
    sql_command AS command,
    string?("") AS connection_uuid,
    query_begin,
    query_end,
    query_payload_bytes {bytes} AS query_payload,
    query_packets AS query_pkts,
    response_begin AS resp_begin,
    response_end AS resp_end,
    response_payload_bytes {bytes} AS resp_payload,
    response_packets AS resp_pkts,
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    application
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY voip AS
  FROM voip_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    captured_pcap AS capture_file,
    application,
    protostack,
    string?("") AS connection_uuid,
    ip_protocol,
    voice_count > 0 AS had_voice,
    call_direction > 0 AS call_direction_is_out,
    last_call_state,
    begin_count > 0 AS is_starting,
    end_count > 0 AS is_finished,
    last_code AS last_error,
    call_id,
    call_duration AS rtp_duration,
    caller_id AS id_caller,
    mac_caller AS caller_mac,
    ip4_caller,
    string(ip6_caller) AS ip6_caller,
    zone_caller,
    codec_caller AS caller_codec,
    callee_id AS id_callee,
    mac_callee AS callee_mac,
    ip4_callee,
    string(ip6_callee) AS ip6_callee,
    zone_callee,
    codec_callee AS callee_codec,
    sign_traffic_bytes_client {bytes} AS sign_bytes_client,
    sign_traffic_bytes_server {bytes} AS sign_bytes_server,
    sign_traffic_packets_client {} AS sign_count_client,
    sign_traffic_packets_server {} AS sign_count_server,
    sign_payload_bytes_client {bytes} AS sign_payload_client,
    sign_payload_bytes_server {bytes} AS sign_payload_server,
    traffic_bytes_client {bytes} AS rtp_rtcp_bytes_caller,
    traffic_bytes_server {bytes} AS rtp_rtcp_bytes_callee,
    traffic_packets_client {} AS rtp_rtcp_count_caller,
    traffic_packets_server {} AS rtp_rtcp_count_callee,
    payload_bytes_client {bytes} AS rtp_rtcp_payload_caller,
    payload_bytes_server {bytes} AS rtp_rtcp_payload_callee,
    sign_rt_count_server {} AS rt_count_server,
    u64(sign_rt_sum_server) {microseconds} AS rt_sum_server,
    u128(sign_rt_square_sum_server) {microseconds^2} AS rt_square_sum_server,
    jitter_count_caller {},
    u64(jitter_sum_caller) {microseconds},
    u128(jitter_square_sum_caller) {microseconds^2},
    jitter_count_callee {},
    u64(jitter_sum_callee) {microseconds},
    u128(jitter_square_sum_callee) {microseconds^2},
    rtt_count_caller {},
    u64(rtt_sum_caller) {microseconds},
    u128(rtt_square_sum_caller) {microseconds^2},
    rtt_count_callee {},
    u64(rtt_sum_callee) {microseconds},
    u128(rtt_square_sum_callee) {microseconds^2},
    lost_packets_caller {} AS loss_callee2caller_alt_count,
    lost_packets_callee {} AS loss_caller2callee_alt_count,
    sign_rtt_count_client {},
    u64(sign_rtt_sum_client) {microseconds},
    u128(sign_rtt_square_sum_client) {microseconds^2},
    sign_rtt_count_server {},
    u64(sign_rtt_sum_server) {microseconds},
    u128(sign_rtt_square_sum_server) {microseconds^2},
    sign_rd_count_client {},
    u64(sign_rd_sum_client) {microseconds},
    u128(sign_rd_square_sum_client) {microseconds^2},
    sign_rd_count_server {},
    u64(sign_rd_sum_server) {microseconds},
    u128(sign_rd_square_sum_server) {microseconds^2}
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;

DEFINE LAZY tls AS
  FROM tls_ext SELECT
    poller,
    capture_begin,
    capture_end,
    datasource_kind_client,
    datasource_name_client,
    datasource_kind_server,
    datasource_name_server,
    vlan_client,
    vlan_server,
    mac_client,
    mac_server,
    zone_client,
    zone_server,
    ip4_client,
    string(ip6_client) AS ip6_client,
    ip4_server,
    string(ip6_server) AS ip6_server,
    port_client,
    port_server,
    application,
    protostack,
    string?("") AS connection_uuid,
    cipher_suite,
    common_name_client {seconds(rel)} AS client_common_name,
    common_name_server {seconds(rel)} AS server_common_name,
    server_name,
    not_after_client AS client_not_after,
    not_after_server AS server_not_after,
    resumed,
    decrypted,
    version,
    signature_client AS client_signature,
    signature_server AS server_signature,
    serial_number_client AS client_serial_number,
    serial_number_server AS server_serial_number,
    key_type_client AS client_type,
    key_type_server AS server_type,
    key_bits_client AS client_bits,
    key_bits_server AS server_bits,
    meta_client {pdus},
    meta_server {pdus},
    data_client,
    data_server,
    alert_types,
    alert_errors,
    traffic_bytes_client {bytes},
    traffic_bytes_server {bytes},
    payload_bytes_client {bytes},
    payload_bytes_server {bytes},
    dtt_count_client {},
    u64(dtt_sum_client) {microseconds},
    u128(dtt_square_sum_client) {microseconds^2},
    dtt_count_server {},
    u64(dtt_sum_server) {microseconds},
    u128(dtt_square_sum_server) {microseconds^2},
    rt_count_server {},
    u64(rt_sum_server) {microseconds},
    u128(rt_square_sum_server) {microseconds^2},
    ct_count {},
    u64(ct_sum) {microseconds},
    u128(ct_square_sum) {microseconds^2}
  EVENT STARTING AT capture_begin * 1e-6
    AND STOPPING AT capture_end * 1e-6;
