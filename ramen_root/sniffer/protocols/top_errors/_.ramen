-- vim: ft=sql expandtab
-- Track servers with most errors, per minutes.

PARAMETERS
  top_size DEFAULT TO 20,
  top_duration DEFAULT TO 1h,
  time_step DEFAULT TO 1min;

RUN IF
  COALESCE(
    variant("extra_tables") = "all" AND (
      time_step <= 1min OR
      time_step <= 10min AND variant("run_time_steps") IN ["up_to_10min"; "up_to_1hour"] OR
      variant("run_time_steps") = "up_to_1hour"
    ), false);

-- Top of type * code * error_ip_server * error_port every time_step
DEFINE icmp_degraded AS
  FROM ../../../csv/icmp
  SELECT
    start, stop,
    IS icmp_type, icmp_code, error_ip_server, error_port_server IN TOP top_size
      AT TIME start FOR THE LAST top_duration AS _important,
    -- degrade the key of not important:
    icmp_type, icmp_code,
    IF _important THEN error_ip_server AS error_ip_server,
    IF _important THEN error_port_server AS error_port_server;

DEFINE icmp
  "Top ICMP errors."
AS
  FROM icmp_degraded
  GROUP BY
    icmp_type, icmp_code, error_ip_server, error_port_server,
    start // time_step
  SELECT
    -- Time info:
    (start // time_step) * time_step AS start,
    out.start + time_step AS stop,

    -- Error description:
    icmp_type DOC "ICMP type of packets.",
    icmp_code DOC "ICMP code of packets.",
    error_ip_server DOC "Server IP in the error message.",
    error_port_server DOC "Server port in the error message.",
    sum 1 AS count "Number of ICMP messages with that type, code, IP and port."
  COMMIT AFTER in.start > out.start + time_step * 1.3
  FACTORS icmp_type, icmp_code;

-- Select the worse TCP servers:
DEFINE tcp_degraded AS
  FROM ../../../csv/tcp
  SELECT
    start, stop,
    (IS ip_server IN TOP top_size BY zero_window_count_server
      AT TIME start FOR THE LAST top_duration) OR
    (IS ip_server IN TOP top_size BY (dupack_count_client + dupack_count_server)
      AT TIME start FOR THE LAST top_duration) OR
    (IS ip_server IN TOP top_size BY (retrans_traffic_bytes_client + retrans_traffic_bytes_server)
      AT TIME start FOR THE LAST top_duration) OR
    (IS ip_server IN TOP top_size BY (rst_count_server + timeout_count)
      AT TIME start FOR THE LAST top_duration)
      AS _important,
    -- The data
    traffic_bytes_client, traffic_bytes_server,
    traffic_packets_client, traffic_packets_server,
    payload_bytes_client, payload_bytes_server,
    payload_packets_client, payload_packets_server,
    retrans_traffic_bytes_client, retrans_traffic_bytes_server,
    retrans_payload_bytes_client, retrans_payload_bytes_server,
    ct_count,
    syn_count_client, fin_count_client,
    fin_count_server, rst_count_client,
    rst_count_server, timeout_count, close_count,
    dupack_count_client, dupack_count_server,
    zero_window_count_client, zero_window_count_server,
    -- Degraded non important ip_server:
    IF _important THEN ip_server AS ip_server;

DEFINE tcp
  "Worse TCP servers."
AS
  FROM tcp_degraded
  GROUP BY ip_server, start // time_step
  SELECT
    -- Time info:
    (start // time_step) * time_step AS start,
    out.start + time_step AS stop,
    -- Data:
    ip_server AS ip,
    sum traffic_bytes_client / time_step AS traffic_bytes_client_per_sec
      "Bytes per second from clients.",
    sum traffic_bytes_server / time_step AS traffic_bytes_server_per_sec
      "Bytes per second from this server.",
    sum traffic_packets_client / time_step AS traffic_packets_client_per_sec
      "Packets per second from clients.",
    sum traffic_packets_server / time_step AS traffic_packets_server_per_sec
      "Packets per second from this server.",
    sum payload_bytes_client / time_step AS payload_bytes_client_per_sec
      "Payload bytes from clients.",
    sum payload_bytes_server / time_step AS payload_bytes_server_per_sec
      "Payload bytes from this server.",
    sum retrans_traffic_bytes_client / time_step AS retrans_traffic_bytes_client_per_sec
      "Retransmitted bytes per second from clients.",
    sum retrans_traffic_bytes_server / time_step AS retrans_traffic_bytes_server_per_sec
      "Retransmitted bytes per second from this server.",
    sum syn_count_client / time_step AS syns_per_sec
      "SYN flags per second.",
    sum fin_count_client / time_step AS client_fins_per_sec
      "FIN flags per second from clients.",
    sum fin_count_server / time_step AS server_fins_per_sec
      "FIN flags per second from this server.",
    sum rst_count_client / time_step AS client_rst_per_sec
      "RST flags per second from clients.",
    sum rst_count_server / time_step AS server_rst_per_sec
      "RST flags per second from this server.",
    sum timeout_count / time_step AS timeouts_per_sec
      "Timeout rate.",
    sum ct_count AS _sum_ct_count,
    _sum_ct_count / time_step AS ct_per_secs
      "connection establishments per second.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      syn_count_client / _sum_ct_count AS syns_per_ct
      "Average number of SYNs per connection establishment.",
    sum close_count / time_step AS closes_per_sec
      "Connection teardowns per second.",
    IF traffic_packets_server = 0 THEN 0 ELSE
      sum dupack_count_client / traffic_packets_server AS dupack_ratio_client
      "Ratio of dupacks from clients over number of packets from this server.",
    IF traffic_packets_client = 0 THEN 0 ELSE
      sum dupack_count_server / traffic_packets_client AS dupack_ratio_server
      "Ratio of dupacks from this server over number of packets from clients.",
    IF traffic_packets_client = 0 THEN 0 ELSE
      sum zero_window_count_client / traffic_packets_client AS zero_window_ratio_client
      "Ratio of 0-window events over number of packets from clients.",
    IF traffic_packets_server = 0 THEN 0 ELSE
      sum zero_window_count_server / traffic_packets_server AS zero_window_ratio_server
      "Ratio of 0-window events over number of packets from this server."
  COMMIT AFTER in.start > out.start + time_step * 1.3
  FACTORS ip;
