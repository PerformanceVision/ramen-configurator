-- vim: ft=sql expandtab

PARAMETER time_step {seconds} DEFAULTS TO 60.0;

RUN IF
  COALESCE(
    time_step <= 1min OR
    time_step <= 10min AND variant("run_time_steps") IN ["up_to_10min"; "up_to_1hour"] OR
    variant("run_time_steps") = "up_to_1hour", false);

-- TCP

DEFINE c2s_tcp AS
  FROM ../../csv/tcp
  SELECT
    start, stop,
    -- In this table we consider that the client is source and the client dest.
    -- We will compute the other way around in s2c_tcp.
    zone_server AS zone,
    traffic_packets_client AS traffic_packets_in,
    traffic_packets_server AS traffic_packets_out,
    traffic_bytes_client AS traffic_bytes_in,
    traffic_bytes_server AS traffic_bytes_out,
    payload_bytes_client AS payload_bytes_in,
    payload_bytes_server AS payload_bytes_out,
    payload_packets_client AS payload_packets_in,
    payload_packets_server AS payload_packets_out,
    retrans_traffic_bytes_client AS retrans_traffic_bytes_in,
    retrans_traffic_bytes_server AS retrans_traffic_bytes_out,
    retrans_payload_bytes_client AS retrans_payload_bytes_in,
    retrans_payload_bytes_server AS retrans_payload_bytes_out,
    fin_count_client AS fin_count_in,
    fin_count_server AS fin_count_out,
    rst_count_client AS rst_count_in,
    rst_count_server AS rst_count_out,
    dupack_count_client AS dupack_count_in,
    dupack_count_server AS dupack_count_out,
    zero_window_count_client AS zero_window_count_in,
    zero_window_count_server AS zero_window_count_out,
    rtt_count_client AS rtt_count_in,
    rtt_count_server AS rtt_count_out,
    rtt_sum_client AS rtt_sum_in,
    rtt_sum_server AS rtt_sum_out,
    rtt_square_sum_client AS rtt_square_sum_in,
    rtt_square_sum_server AS rtt_square_sum_out,
    rd_count_client AS rd_count_in,
    rd_count_server AS rd_count_out,
    rd_sum_client AS rd_sum_in,
    rd_sum_server AS rd_sum_out,
    rd_square_sum_client AS rd_square_sum_in,
    rd_square_sum_server AS rd_square_sum_out,
    dtt_count_client AS dtt_count_in,
    dtt_count_server AS dtt_count_out,
    dtt_sum_client AS dtt_sum_in,
    dtt_sum_server AS dtt_sum_out,
    dtt_square_sum_client AS dtt_square_sum_in,
    dtt_square_sum_server AS dtt_square_sum_out,
    syn_count_client AS syn_count_in,
    0u32 AS syn_count_out,
    -- Those are significant for both directions regardless of where is the client:
    timeout_count, close_count, ct_count, ct_sum, ct_square_sum,
    0u32 AS icmp_error_count;

DEFINE s2c_tcp AS
  FROM ../../csv/tcp
  WHERE zone_client <> zone_client
  SELECT
    start, stop,
    zone_client AS zone,
    traffic_packets_server AS traffic_packets_in,
    traffic_packets_client AS traffic_packets_out,
    traffic_bytes_server AS traffic_bytes_in,
    traffic_bytes_client AS traffic_bytes_out,
    payload_bytes_server AS payload_bytes_in,
    payload_bytes_client AS payload_bytes_out,
    payload_packets_server AS payload_packets_in,
    payload_packets_client AS payload_packets_out,
    retrans_traffic_bytes_server AS retrans_traffic_bytes_in,
    retrans_traffic_bytes_client AS retrans_traffic_bytes_out,
    retrans_payload_bytes_server AS retrans_payload_bytes_in,
    retrans_payload_bytes_client AS retrans_payload_bytes_out,
    fin_count_server AS fin_count_in,
    fin_count_client AS fin_count_out,
    rst_count_server AS rst_count_in,
    rst_count_client AS rst_count_out,
    dupack_count_server AS dupack_count_in,
    dupack_count_client AS dupack_count_out,
    zero_window_count_server AS zero_window_count_in,
    zero_window_count_client AS zero_window_count_out,
    rtt_count_server AS rtt_count_in,
    rtt_count_client AS rtt_count_out,
    rtt_sum_server AS rtt_sum_in,
    rtt_sum_client AS rtt_sum_out,
    rtt_square_sum_server AS rtt_square_sum_in,
    rtt_square_sum_client AS rtt_square_sum_out,
    rd_count_server AS rd_count_in,
    rd_count_client AS rd_count_out,
    rd_sum_server AS rd_sum_in,
    rd_sum_client AS rd_sum_out,
    rd_square_sum_server AS rd_square_sum_in,
    rd_square_sum_client AS rd_square_sum_out,
    dtt_count_server AS dtt_count_in,
    dtt_count_client AS dtt_count_out,
    dtt_sum_server AS dtt_sum_in,
    dtt_sum_client AS dtt_sum_out,
    dtt_square_sum_server AS dtt_square_sum_in,
    dtt_square_sum_client AS dtt_square_sum_out,
    0u32 AS syn_count_in,
    syn_count_client AS syn_count_out,
    timeout_count, close_count, ct_count, ct_sum, ct_square_sum,
    0u32 AS icmp_error_count;

-- UDP

DEFINE c2s_udp AS
  FROM ../../csv/udp
  SELECT
    start, stop,
    zone_server AS zone,
    traffic_packets_client AS traffic_packets_in,
    traffic_packets_server AS traffic_packets_out,
    traffic_bytes_client AS traffic_bytes_in,
    traffic_bytes_server AS traffic_bytes_out,
    payload_bytes_client AS payload_bytes_in,
    payload_bytes_server AS payload_bytes_out,
    payload_packets_client AS payload_packets_in,
    payload_packets_server AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

DEFINE s2c_udp AS
  FROM ../../csv/udp
  WHERE zone_client <> zone_client
  SELECT
    start, stop,
    zone_client AS zone,
    traffic_packets_server AS traffic_packets_in,
    traffic_packets_client AS traffic_packets_out,
    traffic_bytes_server AS traffic_bytes_in,
    traffic_bytes_client AS traffic_bytes_out,
    payload_bytes_server AS payload_bytes_in,
    payload_bytes_client AS payload_bytes_out,
    payload_packets_server AS payload_packets_in,
    payload_packets_client AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

-- ICMP

DEFINE c2s_icmp AS
  FROM ../../csv/icmp
  SELECT
    start, stop,
    zone_server AS zone,
    traffic_packets_client AS traffic_packets_in,
    traffic_packets_server AS traffic_packets_out,
    traffic_bytes_client AS traffic_bytes_in,
    traffic_bytes_server AS traffic_bytes_out,
    payload_bytes_client AS payload_bytes_in,
    payload_bytes_server AS payload_bytes_out,
    payload_packets_client AS payload_packets_in,
    payload_packets_server AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    u32(error_ip4_client IS NOT NULL OR error_ip6_client IS NOT NULL OR
        error_ip4_server IS NOT NULL OR error_ip6_server IS NOT NULL OR
        error_port_client IS NOT NULL OR error_port_server IS NOT NULL OR
        error_ip_proto IS NOT NULL) AS icmp_error_count;

DEFINE s2c_icmp AS
  FROM ../../csv/icmp
  WHERE zone_client <> zone_client
  SELECT
    start, stop,
    zone_client AS zone,
    traffic_packets_server AS traffic_packets_in,
    traffic_packets_client AS traffic_packets_out,
    traffic_bytes_server AS traffic_bytes_in,
    traffic_bytes_client AS traffic_bytes_out,
    payload_bytes_server AS payload_bytes_in,
    payload_bytes_client AS payload_bytes_out,
    payload_packets_server AS payload_packets_in,
    payload_packets_client AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    u32(error_ip4_client IS NOT NULL OR error_ip6_client IS NOT NULL OR
        error_ip4_server IS NOT NULL OR error_ip6_server IS NOT NULL OR
        error_port_client IS NOT NULL OR error_port_server IS NOT NULL OR
        error_ip_proto IS NOT NULL) AS icmp_error_count;

-- OtherIP

DEFINE c2s_other_ip AS
  FROM '../../csv/other-ip'
  SELECT
    start, stop,
    zone_server AS zone,
    traffic_packets_client AS traffic_packets_in,
    traffic_packets_server AS traffic_packets_out,
    traffic_bytes_client AS traffic_bytes_in,
    traffic_bytes_server AS traffic_bytes_out,
    payload_bytes_client AS payload_bytes_in,
    payload_bytes_server AS payload_bytes_out,
    payload_packets_client AS payload_packets_in,
    payload_packets_server AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

DEFINE s2c_other_ip AS
  FROM '../../csv/other-ip'
  WHERE zone_client <> zone_client
  SELECT
    start, stop,
    zone_client AS zone,
    traffic_packets_server AS traffic_packets_in,
    traffic_packets_client AS traffic_packets_out,
    traffic_bytes_server AS traffic_bytes_in,
    traffic_bytes_client AS traffic_bytes_out,
    payload_bytes_server AS payload_bytes_in,
    payload_bytes_client AS payload_bytes_out,
    payload_packets_server AS payload_packets_in,
    payload_packets_client AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

-- NonIP

DEFINE c2s_non_ip AS
  FROM '../../csv/non-ip'
  SELECT
    start, stop,
    zone_server AS zone,
    traffic_packets_client AS traffic_packets_in,
    traffic_packets_server AS traffic_packets_out,
    traffic_bytes_client AS traffic_bytes_in,
    traffic_bytes_server AS traffic_bytes_out,
    payload_bytes_client AS payload_bytes_in,
    payload_bytes_server AS payload_bytes_out,
    payload_packets_client AS payload_packets_in,
    payload_packets_server AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

DEFINE s2c_non_ip AS
  FROM '../../csv/non-ip'
  WHERE zone_client <> zone_client
  SELECT
    start, stop,
    zone_client AS zone,
    traffic_packets_server AS traffic_packets_in,
    traffic_packets_client AS traffic_packets_out,
    traffic_bytes_server AS traffic_bytes_in,
    traffic_bytes_client AS traffic_bytes_out,
    payload_bytes_server AS payload_bytes_in,
    payload_bytes_client AS payload_bytes_out,
    payload_packets_server AS payload_packets_in,
    payload_packets_client AS payload_packets_out,
    0u64 AS retrans_traffic_bytes_in, 0u64 AS retrans_traffic_bytes_out,
    0u64 AS retrans_payload_bytes_in, 0u64 AS retrans_payload_bytes_out,
    0u32 AS fin_count_in, 0u32 AS fin_count_out,
    0u32 AS rst_count_in, 0u32 AS rst_count_out,
    0u32 AS dupack_count_in, 0u32 AS dupack_count_out,
    0u32 AS zero_windows_in, 0u32 AS zero_windows_out,
    0u32 AS rtt_count_in, 0u32 AS rtt_count_out,
    0. AS rtt_sum_in, 0. AS rtt_sum_out,
    0. AS rtt_square_sum_in, 0. AS rtt_square_sum_out,
    0u32 AS rd_count_in, 0u32 AS rd_count_out,
    0. AS rd_sum_in, 0. AS rd_sum_out,
    0. AS rd_square_sum_in, 0. AS rd_square_sum_out,
    0u32 AS dtt_count_in, 0u32 AS dtt_count_out,
    0. AS dtt_sum_in, 0. AS dtt_sum_out,
    0. AS dtt_square_sum_in, 0. AS dtt_square_sum_out,
    0u32 AS syn_count_in, 0u32 AS syn_count_out,
    0u32 AS timeout_count, 0u32 AS close_count,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS icmp_error_count;

-- Finally:

DEFINE traffic
  "Traffic characteristics per destination zone."
AS
  FROM
    c2s_tcp, s2c_tcp,
    c2s_udp, s2c_udp,
    c2s_icmp, s2c_icmp,
    c2s_other_ip, s2c_other_ip,
    c2s_non_ip, s2c_non_ip
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    zone,
    -- Volumes
    sum traffic_bytes_in / time_step AS bytes_per_sec_in
      "Bytes per second entering the zone.",
    sum traffic_bytes_out / time_step AS bytes_per_sec_out
      "Bytes per second exiting the zone.",
    sum traffic_packets_in / time_step AS packets_per_sec_in
      "Packets per second entering the zone.",
    sum traffic_packets_out / time_step AS packets_per_sec_out
      "Packets per second exiting the zone.",
    -- Retransmissions
    sum retrans_traffic_bytes_in / time_step AS retrans_traffic_bytes_per_sec_in
      "Bytes per second retransferred entering the zone.",
    sum retrans_traffic_bytes_out / time_step AS retrans_traffic_bytes_per_sec_out
      "Bytes per second retransferred exiting the zone.",
    -- TCP flags
    sum syn_count_in / time_step AS syn_count_per_sec_in
      "SYN flag per second entering the zone.",
    sum syn_count_out / time_step AS syn_count_per_sec_out
      "SYN flag per second leaving the zone.",
    sum fin_count_in / time_step AS fin_count_per_sec_in
      "FIN flags entering the zone per second.",
    sum fin_count_out / time_step AS fin_count_per_sec_out
      "FIN flags exiting the zone per second.",
    sum rst_count_in / time_step AS rst_count_per_sec_in
      "RST flags entering the zone per second.",
    sum rst_count_out / time_step AS rst_count_per_sec_out
      "RST flags exiting the zone per second.",
    sum close_count / time_step AS close_count_per_sec
      "Connection teardowns per second.",
    -- TCP issues
    sum dupack_count_in / time_step AS dupack_count_per_sec_in
      "DupAcks per second entering the zone.",
    sum dupack_count_out / time_step AS dupack_count_per_sec_out
      "DupAcks per second exiting the zone.",
    -- Average Connection Time
    sum ct_count AS _sum_ct_count,
    sum ct_sum AS _sum_ct_sum,
    _sum_ct_count / time_step AS ct_per_sec
      "Connection establishments per second.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      _sum_ct_sum / _sum_ct_count AS ct_avg
      "Average connection time.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      sqrt (((sum ct_square_sum - _sum_ct_sum^2) / _sum_ct_count)) AS ct_stddev
      "Standard deviation of the connection time.",
    -- Average Round Trip Time out then in
    sum rtt_count_out AS _sum_rtt_count_out,
    sum rtt_sum_out AS _sum_rtt_sum_out,
    _sum_rtt_count_out / time_step AS crtt_per_sec
      "Measured out then in round trip times per second.",
    IF _sum_rtt_count_out = 0 THEN 0 ELSE
      _sum_rtt_sum_out / _sum_rtt_count_out AS crtt_avg
      "Average out then in round trip time.",
    IF _sum_rtt_count_out = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_out - _sum_rtt_sum_out^2) /
            _sum_rtt_count_out) AS crtt_stddev
      "Standard deviation of the out then in round trip time.",
    -- Average Round Trip Time in then out
    sum rtt_count_in AS _sum_rtt_count_in,
    sum rtt_sum_in AS _sum_rtt_sum_in,
    _sum_rtt_count_in / time_step AS srtt_per_sec
      "Measured in then out round trip times per second.",
    IF _sum_rtt_count_in = 0 THEN 0 ELSE
      _sum_rtt_sum_in / _sum_rtt_count_in AS srtt_avg
      "Average in then out round trip time.",
    IF _sum_rtt_count_in = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_in - _sum_rtt_sum_in^2) /
            _sum_rtt_count_in) AS srtt_stddev
      "Standard deviation of the in then out round trip time.",
    -- Average Retransmission Delay C2S
    sum rd_count_in AS _sum_rd_count_in,
    sum rd_sum_in AS _sum_rd_sum_in,
    _sum_rd_count_in / time_step AS rd_per_sec_in
      "Measured retransmission delays per second for incoming traffic.",
    IF _sum_rd_count_in = 0 THEN 0 ELSE
      _sum_rd_sum_in / _sum_rd_count_in AS rd_avg_in
      "Average retransmission delay for incoming traffic.",
    IF _sum_rd_count_in = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_in - _sum_rd_sum_in^2) /
            _sum_rd_count_in) AS rd_stddev_in
      "Standard deviation of the retransmission delays for incoming traffic.",
    -- Average Retransmission Delay S2C
    sum rd_count_out AS _sum_rd_count_out,
    sum rd_sum_out AS _sum_rd_sum_out,
    _sum_rd_count_out / time_step AS rd_per_sec_out
      "Measured retransmission delays per second for outgoing traffic.",
    IF _sum_rd_count_out = 0 THEN 0 ELSE
      _sum_rd_sum_out / _sum_rd_count_out AS rd_avg_out
      "Average retransmission delay for outgoing traffic.",
    IF _sum_rd_count_out = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_out - _sum_rd_sum_out^2) /
            _sum_rd_count_out) AS rd_stddev_out
      "Standard deviation of the retransmission delays for outgoing traffic.",
    -- Average Data Transfer Time C2S
    sum dtt_count_in AS _sum_dtt_count_in,
    sum dtt_sum_in AS _sum_dtt_sum_in,
    _sum_dtt_count_in / time_step AS dtt_per_sec_in
      "Measured data transfer time per second for incoming traffic.",
    IF _sum_dtt_count_in = 0 THEN 0 ELSE
      _sum_dtt_sum_in / _sum_dtt_count_in AS dtt_avg_in
      "Average data transfer time for incoming traffic.",
    IF _sum_dtt_count_in = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_in - _sum_dtt_sum_in^2) /
            _sum_dtt_count_in) AS dtt_stddev_in
      "Standard deviation of the data transfer times for incoming traffic.",
    -- Average Data Transfer Time S2C
    sum dtt_count_out AS _sum_dtt_count_out,
    sum dtt_sum_out AS _sum_dtt_sum_out,
    _sum_dtt_count_out / time_step AS dtt_per_sec_out
      "Measured data transfer time per second for outgoing traffic.",
    IF _sum_dtt_count_out = 0 THEN 0 ELSE
      _sum_dtt_sum_out / _sum_dtt_count_out AS dtt_avg_out
      "Average data transfer time for outgoing traffic.",
    IF _sum_dtt_count_out = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_out - _sum_dtt_sum_out^2) /
            _sum_dtt_count_out) AS dtt_stddev_out
      "Standard deviation of the data transfer times for outgoing traffic.",
    -- Errors
    -- As soon as we handle factors in set-alerts (ie. either select one value or
    -- sum all values or take the min or max) then also group by icmp_type and code.
    sum u32(icmp_error_count) AS icmp_errors_per_sec
      "ICMP errors per second."
  GROUP BY start // u32(time_step), zone
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR zone;
