-- vim: ft=sql expandtab

-- For every CSV we have with an application, resample it and group by application.

PARAMETER time_step {seconds} DEFAULTS TO 60.0;

RUN IF
  COALESCE(
    time_step <= 1min OR
    time_step <= 10min AND variant("run_time_steps") IN ["up_to_10min"; "up_to_1hour"] OR
    variant("run_time_steps") = "up_to_1hour", false);

DEFINE tcp
  "TCP metrics per application and time step."
AS
  FROM ../../csv/tcp
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client AS _sum_traffic_bytes_client,
    _sum_traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second flowing from clients to servers.",
    sum traffic_bytes_server AS _sum_traffic_bytes_server,
    _sum_traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second flowing from servers to clients.",
    sum traffic_packets_client / time_step AS c2s_packets_per_sec
      "Packets per second flowing from clients to servers.",
    sum traffic_packets_server / time_step AS s2c_packets_per_sec
      "Packets per second flowing from servers to clients.",
    -- Retransmissions
    sum retrans_traffic_bytes_client / _sum_traffic_bytes_client
      AS c2s_retrans_bytes_ratio "Ratio of bytes retransmitted by clients.",
    sum retrans_traffic_bytes_server / _sum_traffic_bytes_server
      AS s2c_retrans_bytes_ratio "Ratio of bytes retransmitted by servers.",
    -- TCP flags
    sum syn_count_client AS _sum_syn_count_client,
    _sum_syn_count_client / time_step AS c2s_syns_per_sec
      "SYN flags per second.",
    sum ct_count AS _sum_ct_count,
    IF _sum_ct_count > 0 THEN
      _sum_syn_count_client / _sum_ct_count AS c2s_syns_per_ct
      "SYN flags per connections.",
    IF _sum_ct_count > 0 THEN
      sum rst_count_client / _sum_ct_count AS c2s_rsts_per_ct
      "RST flags from clients to servers per connections.",
    IF _sum_ct_count > 0 THEN
      sum rst_count_server / _sum_ct_count AS s2c_rsts_per_ct
      "RST flags from clients to servers per connections.",
    -- TCP issues
    sum zero_window_count_client / time_step AS c2s_0wins_per_sec
      "0-windows per second from clients to servers.",
    sum zero_window_count_server / time_step AS s2c_0wins_per_sec
      "0-windows per second from servers to clients.",
    -- Average Connection Time
    sum ct_sum AS _sum_ct_sum,
    _sum_ct_count / time_step AS ct_per_sec
      "Connection establishments per second.",
    IF _sum_ct_count > 0 THEN
      _sum_ct_sum / _sum_ct_count AS ct_avg
      "Average connection time.",
    IF _sum_ct_count > 0 THEN
      sqrt (sum ct_square_sum / _sum_ct_count -
            (_sum_ct_sum / _sum_ct_count)^2)
      AS _ct_stddev "Standard deviation of the connection time.",
    ct_avg + _ct_stddev AS 'ct_avg + σ'
      "Average connection time plus its standard deviation.",
    ct_avg - _ct_stddev AS 'ct_avg - σ'
      "Average connection time minus its standard deviation.",
    -- Average Server Response Time
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / time_step AS srt_per_sec
      "Number of query/response pairs per second.",
    IF _sum_rt_count_server > 0 THEN
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server > 0 THEN
      sqrt (sum rt_square_sum_server / _sum_rt_count_server -
            (_sum_rt_sum_server / _sum_rt_count_server)^2)
      AS _srt_stddev "Standard deviation of the response time.",
    srt_avg + _srt_stddev AS 'srt_avg + σ'
      "Average response time plus its standard deviation.",
    srt_avg - _srt_stddev AS 'srt_avg - σ'
      "Average response time minus its standard deviation.",
    -- Average Round Trip Time CSC
    sum rtt_count_server AS _sum_rtt_count_server,
    sum rtt_sum_server AS _sum_rtt_sum_server,
    _sum_rtt_count_server / time_step AS crtt_per_sec
      "Measured client→server→client round trip times per second.",
    IF _sum_rtt_count_server > 0 THEN
      _sum_rtt_sum_server / _sum_rtt_count_server AS crtt_avg
      "Average client→server→client round trip time.",
    IF _sum_rtt_count_server > 0 THEN
      sqrt (sum rtt_square_sum_server / _sum_rtt_count_server -
            (_sum_rtt_sum_server / _sum_rtt_count_server)^2) AS _crtt_stddev
      "Standard deviation of the client→server→client round trip time.",
    crtt_avg + _crtt_stddev AS 'crtt_avg + σ'
      "Average client→server→client round trip time plus its standard deviation.",
    crtt_avg - _crtt_stddev AS 'crtt_avg - σ'
      "Average client→server→client round trip time minus its standard deviation.",
    -- Average Round Trip Time SCS
    sum rtt_count_client AS _sum_rtt_count_client,
    sum rtt_sum_client AS _sum_rtt_sum_client,
    _sum_rtt_count_client / time_step AS srtt_per_sec
      "Measured server→client→server round trip times per second.",
    IF _sum_rtt_count_client > 0 THEN
      _sum_rtt_sum_client / _sum_rtt_count_client AS srtt_avg
      "Average server→client→server round trip time.",
    IF _sum_rtt_count_client > 0 THEN
      sqrt (sum rtt_square_sum_client / _sum_rtt_count_client -
            (_sum_rtt_sum_client / _sum_rtt_count_client)^2) AS _srtt_stddev
      "Standard deviation of the server→client→server round trip time.",
    srtt_avg + _srtt_stddev AS 'srtt_avg + σ'
      "Average server→client→server round trip time plus its standard deviation.",
    srtt_avg - _srtt_stddev AS 'srtt_avg - σ'
      "Average server→client→server round trip time minus its standard deviation.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / time_step AS cdtt_per_sec
      "Measured clients to servers data transfer time per second.",
    IF _sum_dtt_count_client > 0 THEN
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client > 0 THEN
      sqrt (sum dtt_square_sum_client / _sum_dtt_count_client -
            (_sum_dtt_sum_client / _sum_dtt_count_client)^2) AS _cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    cdtt_avg + _cdtt_stddev AS 'cdtt_avg + σ'
      "Average clients to servers data transfer time plus its standard deviation.",
    cdtt_avg - _cdtt_stddev AS 'cdtt_avg - σ'
      "Average clients to servers data transfer time minus its standard deviation.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / time_step AS sdtt_per_sec
      "Measured servers to clients data transfer time per second.",
    IF _sum_dtt_count_server > 0 THEN
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server > 0 THEN
      sqrt (sum dtt_square_sum_server / _sum_dtt_count_server -
            (_sum_dtt_sum_server / _sum_dtt_count_server)^2) AS _sdtt_stddev
      "Standard deviation of the servers to clients data transfer time.",
    sdtt_avg + _sdtt_stddev AS 'sdtt_avg + σ'
      "Average servers to clients data transfer time plus its standard deviation.",
    sdtt_avg - _sdtt_stddev AS 'sdtt_avg - σ'
      "Average servers to clients data transfer time minus its standard deviation."
  WHERE
    ip_external IS NULL -- Exclude netflow
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE udp
  "UDP metrics per application and time step."
AS
  FROM ../../csv/udp
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / time_step AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / time_step AS s2c_packets_per_sec
      "Packets per second from server."
  WHERE
    ip_external IS NULL -- Exclude netflow
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE icmp
  "ICMP metrics per application and time step."
AS
  FROM ../../csv/icmp
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / time_step AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / time_step AS s2c_packets_per_sec
      "Packets per second from server.",
    -- Errors
    -- As soon as we handle factors in set-alerts (ie. either select one value or
    -- sum all values or take the min or max) then also group by icmp_type and code.
    sum u32(error_ip4_server IS NOT NULL OR error_ip6_server IS NOT NULL OR
            error_port_server IS NOT NULL) / time_step AS errors_per_sec
      "ICMP errors per second.",
    -- Meanwhile, provide custom err counts for TTL and fragmentation:
    sum u32(icmp_type = 11 AND icmp_code = 0) / time_step
      AS ttl_errors_per_sec "TTL errors per second.",
    sum u32(icmp_type = 11 AND icmp_code = 1) / time_step
      AS fragmentation_errors_per_sec "Fragmentation errors per second.",
    sum u32(icmp_type = 3) / time_step
      AS unreachable_errors_per_sec "Any kind of ICMP unreachable errors per second."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE 'other-ip'
  "'Other-ip' metrics per application and time step."
AS
  FROM '../../csv/other-ip'
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / time_step AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / time_step AS s2c_packets_per_sec
      "Packets per second from server."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE 'non-ip'
  "Non-IP metrics per application and time step."
AS
  FROM '../../csv/non-ip'
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / time_step AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / time_step AS s2c_packets_per_sec
      "Packets per second from server."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE http
  "HTTP metrics per application and time step."
AS
  FROM ../../csv/http
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    _count / time_step AS hits_per_sec "Queries per second.",
    sum u32(NOT contributed) / time_step AS pages_per_sec
      "Pages per second.",
    sum query_payload / time_step AS query_payload_per_sec
      "Payload bytes per second in queries.",
    sum resp_payload / time_step AS resp_payload_per_sec
      "Payload bytes per second in responses.",
    -- Status:
    sum u32(resp_code >= 400 AND resp_code < 600) / _count AS error_ratio
      "Ratio of 4xx and 5xx response codes over all queries.",
    -- Count separately the number of 1xx, 2xx, 3xx, 4xx and 5xx:
    sum u32(resp_code >= 100 AND resp_code < 200) / _count AS '1xx_ratio'
      "Ratio of 1xx errors.",
    sum u32(resp_code >= 200 AND resp_code < 300) / _count AS '2xx_ratio'
      "Ratio of 2xx errors.",
    sum u32(resp_code >= 300 AND resp_code < 400) / _count AS '3xx_ratio'
      "Ratio of 3xx errors.",
    sum u32(resp_code >= 400 AND resp_code < 500) / _count AS '4xx_ratio'
      "Ratio of 4xx errors.",
    sum u32(resp_code >= 500 AND resp_code < 600) / _count AS '5xx_ratio'
      "Ratio of 5xx errors.",
    -- Timings:
    -- Page load time:
    IF NOT contributed THEN tot_end - tot_begin AS _page_load_time,
    avg _page_load_time DOC "Approximate time to load the page.",
    95th percentile (sample(1000, _page_load_time)) AS page_load_time_95th
      "Approximate 95th percentile of the page load time.",
    -- Client DTT:
    query_end - query_begin AS _cdtt,
    -- min _cdtt DOC "Minimum client DTT.",
    -- max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    -- Response time:
    resp_begin - query_end AS _rt,
    avg _rt DOC "Average response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    -- Server DTT:
    resp_end - resp_begin AS _sdtt,
    -- min _sdtt DOC "Minimum server DTT.",
    -- max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE citrix
  "Citrix metrics per application and time step."
AS
  FROM ../../csv/citrix
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes:
    sum pdus_client AS _sum_pdus_client,
    _sum_pdus_client / time_step AS pdus_client_per_sec
      "PDUs from clients per second.",
    sum pdus_server AS _sum_pdus_server,
    _sum_pdus_server / time_step AS pdus_server_per_sec
      "PDUs from servers per second.",
    sum payloads_client / time_step AS payloads_client_per_sec
      "Payload bytes per second from clients.",
    sum payloads_server / time_step AS payloads_server_per_sec
      "Payload bytes per second from servers.",
    -- Timings:
    -- Average Response Times:
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / time_step AS srt_per_sec
      "Measured response times per second.",
    IF _sum_rt_count_server > 0 THEN
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server > 0 THEN
      sqrt (sum rt_square_sum_server / _sum_rt_count_server -
            (_sum_rt_sum_server / _sum_rt_count_server)^2) AS _srt_stddev
      "Standard deviation of the response times.",
    srt_avg + _srt_stddev AS 'srt_avg + σ'
      "Average response time plus its standard deviation.",
    srt_avg - _srt_stddev AS 'srt_avg - σ'
      "Average response time minus its standard deviation.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / time_step AS cdtt_per_sec
      "Measured clients to servers data transfer times per second.",
    IF _sum_dtt_count_client > 0 THEN
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client > 0 THEN
      sqrt (sum dtt_square_sum_client / _sum_dtt_count_client -
            (_sum_dtt_sum_client / _sum_dtt_count_client)^2) AS _cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    cdtt_avg + _cdtt_stddev AS 'cdtt_avg + σ'
      "Average clients to servers data transfer time plus its standard deviation.",
    cdtt_avg - _cdtt_stddev AS 'cdtt_avg - σ'
      "Average clients to servers data transfer time minus its standard deviation.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / time_step AS sdtt_per_sec
      "Measured servers to clients data transfer times per second.",
    IF _sum_dtt_count_server > 0 THEN
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server > 0 THEN
      sqrt (sum dtt_square_sum_server / _sum_dtt_count_server -
            (_sum_dtt_sum_server / _sum_dtt_count_server)^2) AS _sdtt_stddev
      "Standard deviation of the servers to clients data transfer time.",
    sdtt_avg + _sdtt_stddev AS 'sdtt_avg + σ'
      "Average servers to clients data transfer time plus its standard deviation.",
    sdtt_avg - _sdtt_stddev AS 'sdtt_avg - σ'
      "Average servers to clients data transfer time minus its standard deviation."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE citrix_chanless
  "'Citrix-Chaless' metrics per application and time step."
AS
  FROM ../../csv/citrix_chanless
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes:
    sum pdus_client / time_step AS pdus_client_per_sec
      "PDUs from clients per second.",
    sum pdus_server / time_step AS pdus_server_per_sec
      "PDUs from servers per second.",
    sum payloads_client / time_step AS payloads_client_per_sec
      "Payload bytes per second from clients.",
    sum payloads_server / time_step AS payloads_server_per_sec
      "Payload bytes per second from servers.",
    sum num_aborts / time_step AS aborts_per_sec
      "Aborts per second.",
    -- rather num_timeouts / pdus_client or similar?
    sum num_timeouts / time_step AS timeouts_per_sec
      "Timeouts per second.",
    -- Timings:
    -- Average Response Times:
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / time_step AS srt_per_sec
      "Measured response times per second.",
    IF _sum_rt_count_server > 0 THEN
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server > 0 THEN
      sqrt (sum rt_square_sum_server / _sum_rt_count_server -
            (_sum_rt_sum_server / _sum_rt_count_server)^2) AS _srt_stddev
      "Standard deviation of the response time.",
    srt_avg + _srt_stddev AS 'srt_avg + σ'
      "Average response time plus its standard deviation.",
    srt_avg - _srt_stddev AS 'srt_avg - σ'
      "Average response time minus its standard deviation.",
    -- Average Login Time:
    sum login_time_count AS _sum_login_time_count,
    sum login_time_sum AS _sum_login_time_sum,
    _sum_login_time_count / time_step AS login_time_per_sec
      "Measured login times per second.",
    IF _sum_login_time_count > 0 THEN
      _sum_login_time_sum / _sum_login_time_count AS login_time_avg
      "Average login time.",
    IF _sum_login_time_count > 0 THEN
      sqrt (sum login_time_square_sum / _sum_login_time_count -
            (_sum_login_time_sum / _sum_login_time_count)^2) AS _login_time_stddev
      "Standard deviation of the login time.",
    login_time_avg + _login_time_stddev AS 'login_time_avg + σ'
      "Average login time plus its standard deviation.",
    login_time_avg - _login_time_stddev AS 'login_time_avg - σ'
      "Average login time minus its standard deviation.",
    -- Average Launch Time:
    sum launch_time_count AS _sum_launch_time_count,
    sum launch_time_sum AS _sum_launch_time_sum,
    _sum_launch_time_count / time_step AS launch_time_per_sec
      "Measured launch times per second.",
    IF _sum_launch_time_count > 0 THEN
      _sum_launch_time_sum / _sum_launch_time_count AS launch_time_avg
      "Average launch time.",
    IF _sum_launch_time_count > 0 THEN
      sqrt (sum launch_time_square_sum / _sum_launch_time_count -
            (_sum_launch_time_sum / _sum_launch_time_count)^2) AS _launch_time_stddev
      "Standard deviation of the launch time.",
    launch_time_avg + _launch_time_stddev AS 'launch_time_avg + σ'
      "Average launch time plus its standard deviation.",
    launch_time_avg - _launch_time_stddev AS 'launch_time_avg - σ'
      "Average launch time minus its standard deviation.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / time_step AS cdtt_per_sec
      "Measured clients to servers data transfer times per second.",
    IF _sum_dtt_count_client > 0 THEN
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client > 0 THEN
      sqrt (sum dtt_square_sum_client / _sum_dtt_count_client -
            (_sum_dtt_sum_client / _sum_dtt_count_client)^2) AS _cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    cdtt_avg + _cdtt_stddev AS 'cdtt_avg + σ'
      "Average clients to servers data transfer time plus its standard deviation.",
    cdtt_avg - _cdtt_stddev AS 'cdtt_avg - σ'
      "Average clients to servers data transfer time minus its standard deviation.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / time_step AS sdtt_per_sec
      "Measured servers to clients data transfer times per second.",
    IF _sum_dtt_count_server > 0 THEN
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server > 0 THEN
      sqrt (sum dtt_square_sum_server / _sum_dtt_count_server -
            (_sum_dtt_sum_server / _sum_dtt_count_server)^2) AS _sdtt_stddev
      "Standard deviation of the servers to clients data transfer time.",
    sdtt_avg + _sdtt_stddev AS 'sdtt_avg + σ'
      "Average clients to servers data transfer time plus its standard deviation.",
    sdtt_avg - _sdtt_stddev AS 'sdtt_avg - σ'
      "Average clients to servers data transfer time minus its standard deviation."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE smb
  "SMB metrics per application and time step."
AS
  FROM ../../csv/smb
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    _count / time_step AS queries_per_sec
      "SMB queries per second.",
    sum u32(is_error) / _count AS error_ratio
      "Error ratio.",
    sum u32(is_warning) / _count AS warning_ratio
      "Warning ratio.",
    sum query_payload / time_step AS query_payload_per_sec
      "Payload bytes per second in queries.",
    sum resp_payload / time_step AS resp_payload_per_sec
      "Payload bytes per second in responses.",
    sum query_write_bytes / time_step AS query_write_bytes_per_sec
      "Bytes per second in write queries.",
    sum resp_read_bytes / time_step AS resp_read_bytes_per_sec
      "Bytes per second in read responses.",
    -- Timings:
    -- Client DTT:
    query_end - query_begin AS _cdtt,
    min _cdtt DOC "Minimum client DTT.",
    max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    95th percentile (sample(1000, _cdtt)) AS cdtt_95th
      "Approximate 95th percentile of client DTT.",
    -- Response time:
    resp_begin - query_end AS _rt,
    min _rt DOC "Minimum response time.",
    max _rt DOC "Maximum response time.",
    avg _rt DOC "Average response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    -- Server DTT:
    resp_end - resp_begin AS _sdtt,
    min _sdtt DOC "Minimum server DTT.",
    max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT.",
    95th percentile (sample(1000, _sdtt)) AS sdtt_95th
      "Approximate 95th percentile of server DTT."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE sql
  "SQL metrics per application and time step."
AS
  FROM ../../csv/sql
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    _count / time_step AS queries_per_sec "SQL queries per second.",
    sum u32(timeouted) / _count AS timeout_ratio
      "Ratio of transactions that timed out during capture.",
    sum u32(is_error) / _count AS error_ratio
      "Error ratio.",
    sum query_payload / time_step AS query_payload_per_sec
      "Payload bytes per second in queries.",
    sum resp_payload / time_step AS resp_payload_per_sec
      "Payload bytes per second in responses.",
    -- Timings:
    -- Client DTT:
    query_end - query_begin AS _cdtt,
    min _cdtt DOC "Minimum client DTT.",
    max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    95th percentile (sample(1000, _cdtt)) AS cdtt_95th
      "Approximate 95th percentile of client DTT.",
    -- Response time:
    resp_begin - query_end AS _rt,
    min _rt DOC "Minimum response time.",
    max _rt DOC "Maximum response time.",
    avg _rt DOC "Average response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    -- Server DTT:
    resp_end - resp_begin AS _sdtt,
    min _sdtt DOC "Minimum server DTT.",
    max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT.",
    95th percentile (sample(1000, _sdtt)) AS sdtt_95th
      "Approximate 95th percentile of server DTT."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE voip
  "VoIP metrics per application and time step."
AS
  FROM ../../csv/voip
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    sum u32(is_starting) / time_step AS calls_per_secs
      "Number of (new) calls per second.",
    sum u32(had_voice) / _count AS with_voice_ratio
      "Ratio of calls with voice.",
    sum u32(call_direction_is_out) / _count AS outbind_call_ratio
      "Ratio of outbound calls.",
    sum sign_bytes_client / time_step AS client_sign_bytes_per_sec
      "Bytes per second from clients signalisation.",
    sum sign_bytes_server / time_step AS server_sign_bytes_per_sec
      "Bytes per second from servers signalisation.",
    sum sign_payload_client / time_step AS client_sign_payload_per_sec
      "Payload bytes per second from clients signalisation.",
    sum sign_payload_server / time_step AS server_sign_payload_per_sec
      "Payload bytes per second from servers signalisation.",
    sum rtp_rtcp_bytes_caller / time_step AS caller_rtp_rtcp_bytes_per_sec
      "Bytes per second from callers voice.",
    sum rtp_rtcp_bytes_callee / time_step AS callee_rtp_rtcp_bytes_per_sec
      "Bytes per second from callees voice.",
    sum rtp_rtcp_payload_caller / time_step AS caller_rtp_rtcp_payload_per_sec
      "Payload bytes per second from callers voice.",
    sum rtp_rtcp_payload_callee / time_step AS callee_rtp_rtcp_payload_per_sec
      "Payload bytes per second from callees voice.",
    -- Timings
    -- Average Server Response Time
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / time_step AS srt_per_sec
      "Measured server response times per second.",
    IF _sum_rt_count_server > 0 THEN
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average server response time.",
    IF _sum_rt_count_server > 0 THEN
      sqrt (sum rt_square_sum_server / _sum_rt_count_server -
            (_sum_rt_sum_server / _sum_rt_count_server)^2) AS _srt_stddev
      "Standard deviation of the server response time.",
    srt_avg + _srt_stddev AS 'srt_avg + σ'
      "Average response time plus its standard deviation.",
    srt_avg - _srt_stddev AS 'srt_avg - σ'
      "Average response time minus its standard deviation.",
    -- Jitter caller
    sum jitter_count_caller AS _sum_jitter_count_caller,
    sum jitter_sum_caller AS _sum_jitter_sum_caller,
    _sum_jitter_count_caller / time_step AS caller_jitter_per_sec
      "Measured jitters from caller per second.",
    IF _sum_jitter_count_caller > 0 THEN
      _sum_jitter_sum_caller / _sum_jitter_count_caller AS caller_jitter_avg
      "Average jitter from caller.",
    IF _sum_jitter_count_caller > 0 THEN
      sqrt (sum jitter_square_sum_caller / _sum_jitter_count_caller -
            (_sum_jitter_sum_caller / _sum_jitter_count_caller)^2)
      AS _caller_jitter_stddev "Standard deviation of the jitter from caller.",
    caller_jitter_avg + _caller_jitter_stddev AS 'caller_jitter_avg + σ'
      "Average jitter from caller plus its standard deviation.",
    caller_jitter_avg - _caller_jitter_stddev AS 'caller_jitter_avg - σ'
      "Average jitter from caller minus its standard deviation.",
    -- Jitter callee
    sum jitter_count_callee AS _sum_jitter_count_callee,
    sum jitter_sum_callee AS _sum_jitter_sum_callee,
    _sum_jitter_count_callee / time_step AS callee_jitter_per_sec
      "Measured jitters from callee per second.",
    IF _sum_jitter_count_callee > 0 THEN
      _sum_jitter_sum_callee / _sum_jitter_count_callee AS callee_jitter_avg
      "Average jitter from callee.",
    IF _sum_jitter_count_callee > 0 THEN
      sqrt (sum jitter_square_sum_callee / _sum_jitter_count_callee -
            (_sum_jitter_sum_callee / _sum_jitter_count_callee)^2)
      AS _callee_jitter_stddev "Standard deviation of the jitter from callee.",
    callee_jitter_avg + _callee_jitter_stddev AS 'callee_jitter_avg + σ'
      "Average jitter from callee plus its standard deviation.",
    callee_jitter_avg - _callee_jitter_stddev AS 'callee_jitter_avg - σ'
      "Average jitter from callee minus its standard deviation.",
    -- RTT callee→caller→callee
    sum rtt_count_caller AS _sum_rtt_count_caller,
    sum rtt_sum_caller AS _sum_rtt_sum_caller,
    _sum_rtt_count_caller / time_step AS caller_rtt_per_sec
      "Measured callee→caller→callee round trip times per second.",
    IF _sum_rtt_count_caller > 0 THEN
      _sum_rtt_sum_caller / _sum_rtt_count_caller AS caller_rtt_avg
      "Average callee→caller→callee round trip time.",
    IF _sum_rtt_count_caller > 0 THEN
      sqrt (sum rtt_square_sum_caller / _sum_rtt_count_caller -
            (_sum_rtt_sum_caller / _sum_rtt_count_caller)^2) AS _caller_rtt_stddev
      "Standard deviation of the callee→caller→callee round trip time.",
    caller_rtt_avg + _caller_rtt_stddev AS 'caller_rtt_avg + σ'
      "Average callee→caller→callee round trip time plus its standard deviation.",
    caller_rtt_avg - _caller_rtt_stddev AS 'caller_rtt_avg - σ'
      "Average callee→caller→callee round trip time minus its standard deviation.",
    -- RTT caller→callee→caller
    sum rtt_count_callee AS _sum_rtt_count_callee,
    sum rtt_sum_callee AS _sum_rtt_sum_callee,
    _sum_rtt_count_callee / time_step AS callee_rtt_per_sec
      "Measured caller→callee→caller round trip times per second.",
    IF _sum_rtt_count_callee > 0 THEN
      _sum_rtt_sum_callee / _sum_rtt_count_callee AS callee_rtt_avg
      "Average caller→callee→caller round trip time.",
    IF _sum_rtt_count_callee > 0 THEN
      sqrt (sum rtt_square_sum_callee / _sum_rtt_count_callee -
            (_sum_rtt_sum_callee / _sum_rtt_count_callee)^2) AS _callee_rtt_stddev
      "Standard deviation of the caller→callee→caller round trip time.",
    callee_rtt_avg + _callee_rtt_stddev AS 'callee_rtt_avg + σ'
      "Average callee→callee→callee round trip time plus its standard deviation.",
    callee_rtt_avg - _callee_rtt_stddev AS 'callee_rtt_avg - σ'
      "Average callee→callee→callee round trip time minus its standard deviation.",
    -- Losses (alt count)
    sum loss_callee2caller_alt_count AS _sum_loss_callee2caller_alt_count,
    sum rtp_rtcp_count_callee AS _sum_rtp_rtcp_count_callee,
    _sum_loss_callee2caller_alt_count / _sum_rtp_rtcp_count_callee AS callee_lost_pdus_ratio
      "Ratio of lost packets over total voice packets from callees.",
    sum loss_caller2callee_alt_count AS _sum_loss_caller2callee_alt_count,
    sum rtp_rtcp_count_caller AS _sum_rtp_rtcp_count_caller,
    _sum_loss_caller2callee_alt_count / _sum_rtp_rtcp_count_caller AS caller_lost_pdus_ratio
      "Ratio of lost packets over total voice packets from callers.",
    -- MOS (Mean Opinion Score)
    -- Start by computing bi-directional latency, jitter and loss for this call:
    IF rtt_count_caller + rtt_count_callee > 0 THEN
      (rtt_sum_caller + rtt_sum_callee) / (rtt_count_caller + rtt_count_callee) AS _rtt,
    IF jitter_count_caller + jitter_count_callee > 0 THEN
      (jitter_sum_caller + jitter_sum_callee) / (jitter_count_caller + jitter_count_callee) AS _jitter,
    IF rtp_rtcp_count_callee + rtp_rtcp_count_caller > 0 THEN
      (loss_callee2caller_alt_count + loss_caller2callee_alt_count) / (rtp_rtcp_count_callee + rtp_rtcp_count_caller) AS _loss_ratio,
    -- Now for the MoS recipe:
    _rtt + _jitter * 2 + 10 AS _eff_rtt,
    IF _eff_rtt < 160ms THEN
      93.2ms - _eff_rtt / 40
    ELSE
      93.2ms - (_eff_rtt - 120ms) / 10
    AS _r0,
    _r0 - 100 * 2.5 * _loss_ratio AS _r1,
    1 + 0.035 * _r1 + 0.000007 * _r1 * (_r1 - 60) * (100 - _r1) AS _maybe_mos,
    CASE
      WHEN _maybe_mos < 0 THEN 0
      WHEN _maybe_mos > 5 THEN 5
      ELSE _maybe_mos
    END AS _mos,
    avg _mos DOC "Average approximate mean opinion score (MOS) over all calls.",
    95th percentile (sample(1000, _mos)) AS mos_95th
      "Approximate 95th percentile of the mean opinion score (MOS)."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;

DEFINE tls
  "TLS metrics per application and time step."
AS
  FROM ../../csv/tls
  SELECT
    -- Time
    (start // u32(time_step)) * u32(time_step) AS start,
    out.start + time_step AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / time_step AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / time_step AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum payload_bytes_client / time_step AS c2s_payload_per_sec
      "Bytes per second of payload from client.",
    sum payload_bytes_server / time_step AS s2c_payload_per_sec
      "Bytes per second of payload from server.",
    -- Average Connection Time
    sum ct_count AS _sum_ct_count,
    sum ct_sum AS _sum_ct_sum,
    _sum_ct_count / time_step AS ct_per_sec
      "Connection establishments per second.",
    IF _sum_ct_count > 0 THEN
      _sum_ct_sum / _sum_ct_count AS ct_avg
      "Average connection time.",
    IF _sum_ct_count > 0 THEN
      sqrt (sum ct_square_sum / _sum_ct_count -
            (_sum_ct_sum / _sum_ct_count)^2)
      AS _ct_stddev "Standard deviation of the connection time.",
    ct_avg + _ct_stddev AS 'ct_avg + σ'
      "Average connection time plus its standard deviation.",
    ct_avg - _ct_stddev AS 'ct_avg - σ'
      "Average connection time minus its standard deviation.",
    -- Certificate expirations
    min client_not_after DOC "Minimal certificate validity for clients.",
    min server_not_after DOC "Minimal certificate validity for servers."
  GROUP BY start // u32(time_step), application
  COMMIT AFTER
    in.start > out.start + 2 * time_step
  FACTOR application;
