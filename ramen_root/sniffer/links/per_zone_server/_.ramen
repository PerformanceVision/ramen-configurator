-- vim: ft=sql expandtab

PARAMETER avg_window {seconds} DEFAULTS TO 60.0;

-- Since we have no 'SELECT **' yet we have to adapt data manually:

DEFINE traffic_tcp AS
  FROM ../../../csv/tcp
  SELECT
    start, stop,
    zone_server,
    traffic_bytes_client, traffic_bytes_server,
    traffic_packets_client, traffic_packets_server,
    retrans_traffic_bytes_client, retrans_traffic_bytes_server,
    syn_count_client,
    fin_count_client, fin_count_server,
    rst_count_client, rst_count_server,
    close_count,
    dupack_count_client, dupack_count_server,
    ct_count, ct_sum, ct_square_sum,
    rt_count_server, rt_sum_server, rt_square_sum_server,
    rtt_count_server, rtt_sum_server, rtt_square_sum_server,
    rtt_count_client, rtt_sum_client, rtt_square_sum_client,
    rd_count_client, rd_sum_client, rd_square_sum_client,
    rd_count_server, rd_sum_server, rd_square_sum_server,
    dtt_count_client, dtt_sum_client, dtt_square_sum_client,
    dtt_count_server, dtt_sum_server, dtt_square_sum_server,
    0u32 AS icmp_error_count;

DEFINE traffic_icmp AS
  FROM ../../../csv/icmp
  SELECT
    start, stop,
    zone_server,
    traffic_bytes_client, traffic_bytes_server,
    traffic_packets_client, traffic_packets_server,
    0u64 AS retrans_traffic_bytes_client, 0u64 AS retrans_traffic_bytes_server,
    0u32 AS syn_count_client,
    0u32 AS fin_count_client, 0u32 AS fin_count_server,
    0u32 AS rst_count_client, 0u32 AS rst_count_server,
    0u32 AS close_count,
    0u32 AS dupack_count_client, 0u32 AS dupack_count_server,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS rt_count_server, 0. AS rt_sum_server, 0. AS rt_square_sum_server,
    0u32 AS rtt_count_client, 0. AS rtt_sum_client, 0. AS rtt_square_sum_client,
    0u32 AS rtt_count_server, 0. AS rtt_sum_server, 0. AS rtt_square_sum_server,
    0u32 AS rd_count_client, 0. AS rd_sum_client, 0. AS rd_square_sum_client,
    0u32 AS rd_count_server, 0. AS rd_sum_server, 0. AS rd_square_sum_server,
    0u32 AS dtt_count_client, 0. AS dtt_sum_client, 0. AS dtt_square_sum_client,
    0u32 AS dtt_count_server, 0. AS dtt_sum_server, 0. AS dtt_square_sum_server,
    u32(error_ip4_client IS NOT NULL OR error_ip6_client IS NOT NULL OR
        error_ip4_server IS NOT NULL OR error_ip6_server IS NOT NULL OR
        error_port_client IS NOT NULL OR error_port_server IS NOT NULL OR
        error_ip_proto IS NOT NULL) AS icmp_error_count;

DEFINE traffic_rest AS
  FROM
    ../../../csv/udp,
    '../../../csv/other-ip',
    '../../../csv/non-ip'
  SELECT
    start, stop,
    zone_server,
    traffic_bytes_client, traffic_bytes_server,
    traffic_packets_client, traffic_packets_server,
    0u64 AS retrans_traffic_bytes_client, 0u64 AS retrans_traffic_bytes_server,
    0u32 AS syn_count_client,
    0u32 AS fin_count_client, 0u32 AS fin_count_server,
    0u32 AS rst_count_client, 0u32 AS rst_count_server,
    0u32 AS close_count,
    0u32 AS dupack_count_client, 0u32 AS dupack_count_server,
    0u32 AS ct_count, 0. AS ct_sum, 0. AS ct_square_sum,
    0u32 AS rt_count_server, 0. AS rt_sum_server, 0. AS rt_square_sum_server,
    0u32 AS rtt_count_client, 0. AS rtt_sum_client, 0. AS rtt_square_sum_client,
    0u32 AS rtt_count_server, 0. AS rtt_sum_server, 0. AS rtt_square_sum_server,
    0u32 AS rd_count_client, 0. AS rd_sum_client, 0. AS rd_square_sum_client,
    0u32 AS rd_count_server, 0. AS rd_sum_server, 0. AS rd_square_sum_server,
    0u32 AS dtt_count_client, 0. AS dtt_sum_client, 0. AS dtt_square_sum_client,
    0u32 AS dtt_count_server, 0. AS dtt_sum_server, 0. AS dtt_square_sum_server,
    0u32 AS icmp_error_count;

DEFINE traffic
  "Traffic characteristics per server zone."
AS
  FROM
    traffic_tcp,
    traffic_icmp,
    traffic_rest
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    zone_server DOC "Server Zone",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second flowing from clients to servers.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second flowing from servers to clients.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second flowing from clients to servers.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second flowing from servers to clients.",
    -- Retransmissions
    sum retrans_traffic_bytes_client / avg_window AS c2s_retrans_bytes_per_sec
      "Bytes per second retransferred from clients to servers.",
    sum retrans_traffic_bytes_server / avg_window AS s2c_retrans_bytes_per_sec
      "Bytes per second retransferred from servers to clients.",
    -- TCP flags
    sum syn_count_client / avg_window AS c2s_syns_per_sec
      "SYN flag per second",
    sum fin_count_client / avg_window AS c2s_fins_per_sec
      "FIN flags from clients to servers per second.",
    sum fin_count_server / avg_window AS s2c_fins_per_sec
      "FIN flags from servers to clients per second.",
    sum rst_count_client / avg_window AS c2s_rsts_per_sec
      "RST flags from clients to servers per second.",
    sum rst_count_server / avg_window AS s2c_rsts_per_sec
      "RST flags from servers to clients per second.",
    sum close_count / avg_window AS close_per_sec
      "Connection teardowns per second.",
    -- TCP issues
    sum dupack_count_client / avg_window AS c2s_dupacks_per_sec
      "DupAcks per second from clients to servers.",
    sum dupack_count_server / avg_window AS s2c_dupacks_per_sec
      "DupAcks per second from servers to clients.",
    -- Average Connection Time
    sum ct_count AS _sum_ct_count,
    sum ct_sum AS _sum_ct_sum,
    _sum_ct_count / avg_window AS ct_per_sec
      "Connection establishments per second.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      _sum_ct_sum / _sum_ct_count AS ct_avg
      "Average connection time.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      sqrt (((sum ct_square_sum - _sum_ct_sum^2) / _sum_ct_count)) AS ct_stddev
      "Standard deviation of the connection time.",
    -- Average Server Response Time
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / avg_window AS srt_per_sec
      "Number of query/response pairs per second.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rt_square_sum_server - _sum_rt_sum_server^2) /
            _sum_rt_count_server) AS srt_stddev
      "Standard deviation of the response time.",
    -- Average Round Trip Time CSC
    sum rtt_count_server AS _sum_rtt_count_server,
    sum rtt_sum_server AS _sum_rtt_sum_server,
    _sum_rtt_count_server / avg_window AS crtt_per_sec
      "Measured client→server→client round trip times per second.",
    IF _sum_rtt_count_server = 0 THEN 0 ELSE
      _sum_rtt_sum_server / _sum_rtt_count_server AS crtt_avg
      "Average client→server→client round trip time.",
    IF _sum_rtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_server - _sum_rtt_sum_server^2) /
            _sum_rtt_count_server) AS crtt_stddev
      "Standard deviation of the client→server→client round trip time.",
    -- Average Round Trip Time SCS
    sum rtt_count_client AS _sum_rtt_count_client,
    sum rtt_sum_client AS _sum_rtt_sum_client,
    _sum_rtt_count_client / avg_window AS srtt_per_sec
      "Measured server→client→server round trip times per second.",
    IF _sum_rtt_count_client = 0 THEN 0 ELSE
      _sum_rtt_sum_client / _sum_rtt_count_client AS srtt_avg
      "Average server→client→server round trip time.",
    IF _sum_rtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_client - _sum_rtt_sum_client^2) /
            _sum_rtt_count_client) AS srtt_stddev
      "Standard deviation of the server→client→server round trip time.",
    -- Average Retransmission Delay C2S
    sum rd_count_client AS _sum_rd_count_client,
    sum rd_sum_client AS _sum_rd_sum_client,
    _sum_rd_count_client / avg_window AS crd_per_sec
      "Measured retransmission delays per second.",
    IF _sum_rd_count_client = 0 THEN 0 ELSE
      _sum_rd_sum_client / _sum_rd_count_client AS crd_avg
      "Average retransmission delay.",
    IF _sum_rd_count_client = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_client - _sum_rd_sum_client^2) /
            _sum_rd_count_client) AS crd_stddev
      "Standard deviation of the retransmission delays.",
    -- Average Retransmission Delay S2C
    sum rd_count_server AS _sum_rd_count_server,
    sum rd_sum_server AS _sum_rd_sum_server,
    _sum_rd_count_server / avg_window AS srd_per_sec
      "Measured clients to servers retransmission delays per second.",
    IF _sum_rd_count_server = 0 THEN 0 ELSE
      _sum_rd_sum_server / _sum_rd_count_server AS srd_avg
      "Average clients to servers retransmission delay.",
    IF _sum_rd_count_server = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_server - _sum_rd_sum_server^2) /
            _sum_rd_count_server) AS srd_stddev
      "Standard deviation of the clients to servers retransmission delay.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / avg_window AS cdtt_per_sec
      "Measured clients to servers data transfer time per second.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_client - _sum_dtt_sum_client^2) /
            _sum_dtt_count_client) AS cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / avg_window AS sdtt_per_sec
      "Measured servers to clients data transfer time per second.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_server - _sum_dtt_sum_server^2) /
            _sum_dtt_count_server) AS sdtt_stddev
      "Standard deviation of the servers to clients data transfer time.",
    -- Errors
    -- As soon as we handle factors in set-alerts (ie. either select one value or
    -- sum all values or take the min or max) then also group by icmp_type and code.
    sum u32(icmp_error_count) AS icmp_errors_per_sec
      "ICMP errors per second."
  GROUP BY start // u32(avg_window), zone_server
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR zone_server;
