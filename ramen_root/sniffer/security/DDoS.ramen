-- vim: ft=sql expandtab

PARAMETERS
  avg_win DEFAULTS TO 2min,
  false_pos_rate DEFAULT TO 0.1, -- 10% of false positives
  whitelist Cidr[]?; -- Those won't be frowned upon
  -- TODO: also remember durations?

DEFINE LAZY 'new peers'
--  "Approximation of the number of new unique clients and socket pairs."
AS
  FROM
    ../../metrics/tcp,
    ../../metrics/udp,
    ../../metrics/icmp,
    '../../metrics/other-ip'
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge_greatest.start - 3min AND
    COALESCE(ip_client NOT IN whitelist, true)
  SELECT
    truncate(start, avg_win) AS start,
    out.start + avg_win AS stop,
    min start, max stop,
    -- Traffic (of any kind) we haven't seen in the last hour.
    -- Increase the estimate of *not* remembering since we ask for 10% of
    -- false positives.
    sum ((1 + false_pos_rate) * float(not remember (
           false_pos_rate,
           start, 1h,
           ip_client, ip_server))) / avg_win
        AS num_new_cnxs_per_sec
        "Approximate number of newly communicating hosts (as in: hosts that were not communicating for at least one hour)",
    -- Clients we haven't seen in the last hour.
    sum ((1 + false_pos_rate) * float(not remember (
           false_pos_rate, start, 1h, ip_client))) / avg_win
        AS num_new_clients_per_sec
        "Approximate number of new clients (as in: hosts that were not clients of anything for at least one hour)"
  GROUP BY start // avg_win
  COMMIT AFTER
    in.start > out.min_start + 2 * u64(avg_win);

DEFINE LAZY 'new peers: DDoS predictions' AS
  FROM 'new peers'
  SELECT
    start,
    num_new_cnxs_per_sec,
    smooth globally(num_new_cnxs_per_sec) AS pred_0_num_new_cnxs_per_sec,
    fit globally(5, num_new_cnxs_per_sec) AS pred_1_num_new_cnxs_per_sec,
    5-ma globally(num_new_cnxs_per_sec) AS pred_2_num_new_cnxs_per_sec,
    lag globally(num_new_cnxs_per_sec) AS pred_3_num_new_cnxs_per_sec,
    IF num_new_cnxs_per_sec > 1 THEN (abs(pred_3_num_new_cnxs_per_sec - num_new_cnxs_per_sec) /
       max(abs pred_3_num_new_cnxs_per_sec, abs num_new_cnxs_per_sec) +
     abs(pred_2_num_new_cnxs_per_sec - num_new_cnxs_per_sec) /
       max(abs pred_2_num_new_cnxs_per_sec, abs num_new_cnxs_per_sec) +
     abs(pred_1_num_new_cnxs_per_sec - num_new_cnxs_per_sec) /
       max(abs pred_1_num_new_cnxs_per_sec, abs num_new_cnxs_per_sec) +
     abs(pred_0_num_new_cnxs_per_sec - num_new_cnxs_per_sec) /
       max(abs pred_0_num_new_cnxs_per_sec, abs num_new_cnxs_per_sec)) / 4 ELSE 0
        AS abnormality_num_new_cnxs_per_sec,
    num_new_clients_per_sec,
    smooth globally(num_new_clients_per_sec) AS pred_0_num_new_clients_per_sec,
    fit globally(5, num_new_clients_per_sec) AS pred_1_num_new_clients_per_sec,
    5-ma globally(num_new_clients_per_sec) AS pred_2_num_new_clients_per_sec,
    lag globally(num_new_clients_per_sec) AS pred_3_num_new_clients_per_sec,
    IF num_new_clients_per_sec > 1 THEN (abs(pred_3_num_new_clients_per_sec - num_new_clients_per_sec) /
       max(abs pred_3_num_new_clients_per_sec, abs num_new_clients_per_sec) +
     abs(pred_2_num_new_clients_per_sec - num_new_clients_per_sec) /
       max(abs pred_2_num_new_clients_per_sec, abs num_new_clients_per_sec) +
     abs(pred_1_num_new_clients_per_sec - num_new_clients_per_sec) /
       max(abs pred_1_num_new_clients_per_sec, abs num_new_clients_per_sec) +
     abs(pred_0_num_new_clients_per_sec - num_new_clients_per_sec) /
       max(abs pred_0_num_new_clients_per_sec, abs num_new_clients_per_sec)) / 4 ELSE 0
        AS abnormality_num_new_clients_per_sec;

DEFINE 'new peers: DDoS anomalies' AS
  FROM 'new peers: DDoS predictions'
  SELECT
    start,
    (abnormality_num_new_clients_per_sec > 0.75 OR
     abnormality_num_new_cnxs_per_sec > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "possible DDoS" AS desc
  NOTIFY "Security - Possible DDoS detected"
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);
