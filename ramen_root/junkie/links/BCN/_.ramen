PARAMETERS
  uniq_name DEFAULTS TO "",
  id DEFAULTS TO 0,
  min_bps U32? {bytes*seconds^-1} DEFAULTS TO NULL,
  max_bps U32? {bytes*seconds^-1} DEFAULTS TO NULL,
  max_rtt FLOAT? {seconds} DEFAULTS TO NULL,
  max_rr FLOAT? {} DEFAULTS TO NULL,
  min_for_relevance DEFAULTS TO 10,
  avg_window {seconds} DEFAULTS TO 60.0,
  obs_window {seconds} DEFAULTS TO 600.0,
  perc DEFAULTS TO 90.0,
  source U32[] DEFAULTS TO [0],
  source_name DEFAULTS TO "any",
  dest U32[] DEFAULTS TO [0],
  dest_name DEFAULTS TO "any";

DEFINE 'avg traffic' AS
  FROM
    '../../../csv/c2s tcp',
    '../../../csv/s2c tcp',
    '../../../csv/c2s udp',
    '../../../csv/s2c udp',
    '../../../csv/c2s icmp',
    '../../../csv/s2c icmp',
    '../../../csv/c2s other-ip',
    '../../../csv/s2c other-ip',
    '../../../csv/c2s non-ip',
    '../../../csv/s2c non-ip'
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min AND
    (source_name = "any" OR in.zone_src IN source) AND
    (dest_name = "any" OR in.zone_dst IN dest)
  SELECT
    min start, max stop,
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    -- Traffic
    sum packets_src / avg_window AS packets_per_secs,
    sum bytes_src / avg_window AS bytes_per_secs,
    -- RTT (in seconds)
    sum COALESCE(rtt_count_src, 0) AS _sum_rtt_count_src,
    IF _sum_rtt_count_src = 0 THEN 0 ELSE
      sum rtt_sum_src / _sum_rtt_count_src AS avg_rtt,
    -- RD: percentage of retransmitted packets over packets with payload
    sum packets_with_payload_src AS _sum_packets_with_payload_src,
    IF _sum_packets_with_payload_src = 0 THEN 0 ELSE
      (sum COALESCE(rd_count_src, 0) / _sum_packets_with_payload_src) / 100 AS avg_rr,
    source_name AS zone_src, dest_name AS zone_dst
  GROUP BY start // u32(avg_window)
  COMMIT AFTER
    in.start > out.start + 2 * u64(avg_window);

DEFINE percentiles AS
  -- Note: The event maps to the observation window
  FROM 'avg traffic'
  SELECT
    min start, max start,
    (min_start // obs_window) * obs_window AS start,
    out.start + obs_window AS stop,
    perc percentile (
      last u32(obs_window / avg_window) bytes_per_secs
    ) AS bytes_per_secs,
    perc percentile (
      last u32(obs_window / avg_window) avg_rtt
    ) AS rtt,
    perc percentile (
      last u32(obs_window / avg_window) avg_rr
    ) AS rr,
    zone_src, zone_dst
  COMMIT AFTER
    sum 1 >= round (obs_window / avg_window) OR
    in.start > out.start + obs_window * 1.5;

DEFINE 'traffic too low' AS
  FROM percentiles
  SELECT
    max_start AS start,
    -- Turn NULLs into 0-certainty alert
    COALESCE (bytes_per_secs, min_bps, 0) AS bytes_per_secs,
    -- Other case of NULL: no min_bps
    COALESCE (
      NOT (HYSTERESIS (bytes_per_secs, min_bps*1.1, min_bps)),
      false) AS firing
  NOTIFY "BCN - Low traffic from ${source_name} to ${dest_name}" WITH
    firing,
    1 AS certainty,
    "The traffic from zone ${source_name} to ${dest_name} has sunk below the configured minimum of ${min_bps} for the last ${obs_window} seconds."
      AS desc,
    id AS bcn,
    -- those can be null:
    "${bytes_per_secs}" AS values,
    "${min_bps}" AS thresholds
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'traffic too high' AS
  FROM percentiles
  SELECT
    max_start AS start,
    COALESCE (
      NOT (HYSTERESIS (bytes_per_secs, max_bps*0.9, max_bps)),
      false) AS firing
  WHERE
    COALESCE(bytes_per_secs, 0) >= min_for_relevance
  NOTIFY "BCN - High traffic from ${source_name} to ${dest_name}" WITH
    firing,
    1 AS certainty,
    "The traffic from zone ${source_name} to ${dest_name} has raised above the configured maximum of ${max_bps} for the last ${obs_window} seconds."
      AS desc,
    id AS bcn,
    -- those can be null:
    "${bytes_per_secs}" AS values,
    "${max_bps}" AS thresholds
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'round-trip time' AS
  FROM percentiles
  SELECT
    max_start AS start,
    -- Turn NULLs into 0-certainty alert
    COALESCE (rtt, max_rtt, 0) AS rtt,
    -- Other case of NULL: no max_rtt
    COALESCE (
      NOT (HYSTERESIS (rtt, max_rtt*0.9, max_rtt)),
      false) AS firing
  WHERE
    COALESCE(bytes_per_secs, 0) >= min_for_relevance
  NOTIFY "BCN - RTT too high from ${source_name} to ${dest_name}" WITH
    firing,
    1 AS certainty,
    "Traffic from zone ${source_name} to zone ${dest_name} has an average RTT of ${rtt}, greater than the configured maximum of ${max_rtt}s, for the last ${obs_window} seconds."
      AS desc,
    id AS bcn,
    out.rtt AS values,
    -- max_rtt can still be null, but if it is we won't alert:
    "${max_rtt}" AS thresholds
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE retransmissions AS
  FROM percentiles
  SELECT
    max_start AS start,
    -- Turn NULLs into 0-certainty alert
    COALESCE (rr, max_rr, 0) AS rr,
    -- Other case of NULL: no max_rr
    COALESCE (
      NOT (HYSTERESIS (rr, max_rr*0.9, max_rr)),
      false) AS firing
  WHERE
    COALESCE(bytes_per_secs, 0) >= min_for_relevance
  NOTIFY "BCN - Too many retransmissions from ${source_name} to ${dest_name}" WITH
    firing,
    1 AS certainty,
    "Traffic from zone ${source_name} to zone ${dest_name} has an average retransmission rate of ${rr}%%, greater than the configured maximum of ${max_rr}s, for the last ${obs_window} seconds."
      AS desc,
    id AS bcn,
    out.rr AS values,
    -- max_rr is nullable:
    "${max_rr}" AS thresholds
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely' AS
  FROM
    '../../../csv/c2s tcp',
    '../../../csv/s2c tcp'
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min AND
    (source_name = "any" OR in.zone_src IN source) AND
    (dest_name = "any" OR in.zone_dst IN dest) AND
    -- Exclude netflow traffic
    retrans_bytes_src IS NOT NULL AND
    retrans_payload_src IS NOT NULL AND
    syns IS NOT NULL AND
    fins_src IS NOT NULL AND
    rsts_src IS NOT NULL AND
    closes IS NOT NULL AND
    connections IS NOT NULL AND
    dupacks_src IS NOT NULL AND
    zero_windows_src IS NOT NULL AND
    rtt_count_src IS NOT NULL AND
    rd_count_src IS NOT NULL AND
    dtt_count_src IS NOT NULL
  SELECT
    min start, max stop,
    (start // 60) * 60 AS start,
    out.start + 60s AS stop,
    sum packets_src / 60 AS packets_per_secs,
    sum bytes_src / 60 AS bytes_per_secs,
    sum payload_src / 60 AS payload_per_secs,
    sum packets_with_payload_src / 60 AS packets_with_payload_per_secs,
    sum COALESCE(retrans_bytes_src, 0) / 60 AS retrans_bytes_per_secs,
    sum COALESCE(retrans_payload_src, 0) / 60 AS retrans_payload_per_secs,
    sum COALESCE(fins_src, 0) / 60 AS fins_per_secs,
    sum COALESCE(rsts_src, 0) / 60 AS rsts_per_secs,
    sum timeouts / 60 AS timeouts_per_secs,
    sum COALESCE(syns, 0) / 60 AS syns_per_secs,
    sum COALESCE(closes, 0) / 60 AS closes_per_secs,
    sum COALESCE(connections, 0) AS _sum_connections,
    _sum_connections / 60 AS connections_per_secs,
    sum COALESCE(dupacks_src, 0) / 60 AS dupacks_per_secs,
    sum COALESCE(zero_windows_src, 0) / 60 AS zero_windows_per_secs,
    sum COALESCE(rtt_count_src, 0) AS sum_rtt_count_src,
    sum rtt_sum_src AS _sum_rtt_sum_src,
    _sum_rtt_sum_src / sum_rtt_count_src AS rtt_avg,
    -- We divide here by 1 packet because the distance to the mean is
    -- the distance between two means. Alternatively, we could have
    -- erased sum_rtt_count_src units (packets) so that the average
    -- would be just seconds:
    (sum rtt_sum2_src / 1{packets} - _sum_rtt_sum_src^2 / sum_rtt_count_src) /
        sum_rtt_count_src AS rtt_var,
    sum COALESCE(rd_count_src, 0) AS sum_rd_count_src,
    sum rd_sum_src AS _sum_rd_sum_src,
    _sum_rd_sum_src / sum_rd_count_src AS rd_avg,
    (sum rd_sum2_src / 1{packets} - _sum_rd_sum_src^2 / sum_rd_count_src) /
        sum_rd_count_src AS rd_var,
    sum COALESCE(dtt_count_src, 0) AS sum_dtt_count_src,
    sum dtt_sum_src AS _sum_dtt_sum_src,
    _sum_dtt_sum_src / sum_dtt_count_src AS dtt_avg,
    (sum dtt_sum2_src / 1{packets}  - _sum_dtt_sum_src^2 / sum_dtt_count_src) /
        sum_dtt_count_src AS dtt_var,
    sum connections_time AS _sum_connections_time,
    _sum_connections_time / _sum_connections AS connection_time_avg,
    (sum connections_time2 / 1{packets} - _sum_connections_time^2 / _sum_connections) /
        _sum_connections AS connection_time_var
  GROUP BY start // 60
  COMMIT AFTER
    in.start > out.min_start + 2 * 60s;

DEFINE 'TCP minutely: volume predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    packets_per_secs,
    smooth(packets_per_secs) AS pred_0_packets_per_secs,
    fit(5, packets_per_secs) AS pred_1_packets_per_secs,
    5-ma(packets_per_secs) AS pred_2_packets_per_secs,
    lag(packets_per_secs) AS pred_3_packets_per_secs,
    fit_multi(5, packets_per_secs, bytes_per_secs, packets_with_payload_per_secs) AS pred_4_packets_per_secs,
    IF packets_per_secs > 10 THEN (abs(pred_4_packets_per_secs - packets_per_secs) /
       max(abs pred_4_packets_per_secs, abs packets_per_secs) +
     abs(pred_3_packets_per_secs - packets_per_secs) /
       max(abs pred_3_packets_per_secs, abs packets_per_secs) +
     abs(pred_2_packets_per_secs - packets_per_secs) /
       max(abs pred_2_packets_per_secs, abs packets_per_secs) +
     abs(pred_1_packets_per_secs - packets_per_secs) /
       max(abs pred_1_packets_per_secs, abs packets_per_secs) +
     abs(pred_0_packets_per_secs - packets_per_secs) /
       max(abs pred_0_packets_per_secs, abs packets_per_secs)) / 5 ELSE 0 AS abnormality_packets_per_secs,
    bytes_per_secs,
    smooth(bytes_per_secs) AS pred_0_bytes_per_secs,
    fit(5, bytes_per_secs) AS pred_1_bytes_per_secs,
    5-ma(bytes_per_secs) AS pred_2_bytes_per_secs,
    lag(bytes_per_secs) AS pred_3_bytes_per_secs,
    fit_multi(5, bytes_per_secs, packets_per_secs, payload_per_secs) AS pred_4_bytes_per_secs,
    IF bytes_per_secs > 1000 THEN (abs(pred_4_bytes_per_secs - bytes_per_secs) /
       max(abs pred_4_bytes_per_secs, abs bytes_per_secs) +
     abs(pred_3_bytes_per_secs - bytes_per_secs) /
       max(abs pred_3_bytes_per_secs, abs bytes_per_secs) +
     abs(pred_2_bytes_per_secs - bytes_per_secs) /
       max(abs pred_2_bytes_per_secs, abs bytes_per_secs) +
     abs(pred_1_bytes_per_secs - bytes_per_secs) /
       max(abs pred_1_bytes_per_secs, abs bytes_per_secs) +
     abs(pred_0_bytes_per_secs - bytes_per_secs) /
       max(abs pred_0_bytes_per_secs, abs bytes_per_secs)) / 5 ELSE 0 AS abnormality_bytes_per_secs,
    payload_per_secs,
    smooth(payload_per_secs) AS pred_0_payload_per_secs,
    fit(5, payload_per_secs) AS pred_1_payload_per_secs,
    5-ma(payload_per_secs) AS pred_2_payload_per_secs,
    lag(payload_per_secs) AS pred_3_payload_per_secs,
    fit_multi(5, payload_per_secs, bytes_per_secs) AS pred_4_payload_per_secs,
    IF payload_per_secs > 1000 THEN (abs(pred_4_payload_per_secs - payload_per_secs) /
       max(abs pred_4_payload_per_secs, abs payload_per_secs) +
     abs(pred_3_payload_per_secs - payload_per_secs) /
       max(abs pred_3_payload_per_secs, abs payload_per_secs) +
     abs(pred_2_payload_per_secs - payload_per_secs) /
       max(abs pred_2_payload_per_secs, abs payload_per_secs) +
     abs(pred_1_payload_per_secs - payload_per_secs) /
       max(abs pred_1_payload_per_secs, abs payload_per_secs) +
     abs(pred_0_payload_per_secs - payload_per_secs) /
       max(abs pred_0_payload_per_secs, abs payload_per_secs)) / 5 ELSE 0 AS abnormality_payload_per_secs,
    packets_with_payload_per_secs,
    smooth(packets_with_payload_per_secs) AS pred_0_packets_with_payload_per_secs,
    fit(5, packets_with_payload_per_secs) AS pred_1_packets_with_payload_per_secs,
    5-ma(packets_with_payload_per_secs) AS pred_2_packets_with_payload_per_secs,
    lag(packets_with_payload_per_secs) AS pred_3_packets_with_payload_per_secs,
    fit_multi(5, packets_with_payload_per_secs, packets_per_secs) AS pred_4_packets_with_payload_per_secs,
    IF packets_with_payload_per_secs > 10 THEN (abs(pred_4_packets_with_payload_per_secs - packets_with_payload_per_secs) /
       max(abs pred_4_packets_with_payload_per_secs, abs packets_with_payload_per_secs) +
     abs(pred_3_packets_with_payload_per_secs - packets_with_payload_per_secs) /
       max(abs pred_3_packets_with_payload_per_secs, abs packets_with_payload_per_secs) +
     abs(pred_2_packets_with_payload_per_secs - packets_with_payload_per_secs) /
       max(abs pred_2_packets_with_payload_per_secs, abs packets_with_payload_per_secs) +
     abs(pred_1_packets_with_payload_per_secs - packets_with_payload_per_secs) /
       max(abs pred_1_packets_with_payload_per_secs, abs packets_with_payload_per_secs) +
     abs(pred_0_packets_with_payload_per_secs - packets_with_payload_per_secs) /
       max(abs pred_0_packets_with_payload_per_secs, abs packets_with_payload_per_secs)) / 5 ELSE 0 AS abnormality_packets_with_payload_per_secs;

DEFINE 'TCP minutely: volume anomalies' AS
  FROM 'TCP minutely: volume predictions'
  SELECT
    start,
    (abnormality_packets_with_payload_per_secs > 0.75 OR
     abnormality_payload_per_secs > 0.75 OR
     abnormality_bytes_per_secs > 0.75 OR
     abnormality_packets_per_secs > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "volume" AS metric,
    "TCP volume looks abnormal from ${source_name} to ${dest_name}" AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: retransmissions predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    retrans_bytes_per_secs,
    smooth(retrans_bytes_per_secs) AS pred_0_retrans_bytes_per_secs,
    fit(5, retrans_bytes_per_secs) AS pred_1_retrans_bytes_per_secs,
    5-ma(retrans_bytes_per_secs) AS pred_2_retrans_bytes_per_secs,
    lag(retrans_bytes_per_secs) AS pred_3_retrans_bytes_per_secs,
    fit_multi(5, retrans_bytes_per_secs, retrans_payload_per_secs) AS pred_4_retrans_bytes_per_secs,
    IF retrans_bytes_per_secs > 1000 THEN (abs(pred_4_retrans_bytes_per_secs - retrans_bytes_per_secs) /
       max(abs pred_4_retrans_bytes_per_secs, abs retrans_bytes_per_secs) +
     abs(pred_3_retrans_bytes_per_secs - retrans_bytes_per_secs) /
       max(abs pred_3_retrans_bytes_per_secs, abs retrans_bytes_per_secs) +
     abs(pred_2_retrans_bytes_per_secs - retrans_bytes_per_secs) /
       max(abs pred_2_retrans_bytes_per_secs, abs retrans_bytes_per_secs) +
     abs(pred_1_retrans_bytes_per_secs - retrans_bytes_per_secs) /
       max(abs pred_1_retrans_bytes_per_secs, abs retrans_bytes_per_secs) +
     abs(pred_0_retrans_bytes_per_secs - retrans_bytes_per_secs) /
       max(abs pred_0_retrans_bytes_per_secs, abs retrans_bytes_per_secs)) / 5 ELSE 0 AS abnormality_retrans_bytes_per_secs,
    dupacks_per_secs,
    smooth(dupacks_per_secs) AS pred_0_dupacks_per_secs,
    fit(5, dupacks_per_secs) AS pred_1_dupacks_per_secs,
    5-ma(dupacks_per_secs) AS pred_2_dupacks_per_secs,
    lag(dupacks_per_secs) AS pred_3_dupacks_per_secs,
    IF dupacks_per_secs > 1 THEN (abs(pred_3_dupacks_per_secs - dupacks_per_secs) /
       max(abs pred_3_dupacks_per_secs, abs dupacks_per_secs) +
     abs(pred_2_dupacks_per_secs - dupacks_per_secs) /
       max(abs pred_2_dupacks_per_secs, abs dupacks_per_secs) +
     abs(pred_1_dupacks_per_secs - dupacks_per_secs) /
       max(abs pred_1_dupacks_per_secs, abs dupacks_per_secs) +
     abs(pred_0_dupacks_per_secs - dupacks_per_secs) /
       max(abs pred_0_dupacks_per_secs, abs dupacks_per_secs)) / 4 ELSE 0 AS abnormality_dupacks_per_secs;

DEFINE 'TCP minutely: retransmissions anomalies' AS
  FROM 'TCP minutely: retransmissions predictions'
  SELECT
    start,
    (abnormality_dupacks_per_secs > 0.75 OR
     abnormality_retrans_bytes_per_secs > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "retransmissions" AS metric,
    "TCP retransmissions from ${source_name} to ${dest_name} looks abnormal" AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: connections predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    fins_per_secs,
    smooth(fins_per_secs) AS pred_0_fins_per_secs,
    fit(5, fins_per_secs) AS pred_1_fins_per_secs,
    5-ma(fins_per_secs) AS pred_2_fins_per_secs,
    lag(fins_per_secs) AS pred_3_fins_per_secs,
    fit_multi(5, fins_per_secs, packets_per_secs) AS pred_4_fins_per_secs,
    IF fins_per_secs > 1 THEN (abs(pred_4_fins_per_secs - fins_per_secs) /
       max(abs pred_4_fins_per_secs, abs fins_per_secs) +
     abs(pred_3_fins_per_secs - fins_per_secs) /
       max(abs pred_3_fins_per_secs, abs fins_per_secs) +
     abs(pred_2_fins_per_secs - fins_per_secs) /
       max(abs pred_2_fins_per_secs, abs fins_per_secs) +
     abs(pred_1_fins_per_secs - fins_per_secs) /
       max(abs pred_1_fins_per_secs, abs fins_per_secs) +
     abs(pred_0_fins_per_secs - fins_per_secs) /
       max(abs pred_0_fins_per_secs, abs fins_per_secs)) / 5 ELSE 0 AS abnormality_fins_per_secs,
    rsts_per_secs,
    smooth(rsts_per_secs) AS pred_0_rsts_per_secs,
    fit(5, rsts_per_secs) AS pred_1_rsts_per_secs,
    5-ma(rsts_per_secs) AS pred_2_rsts_per_secs,
    lag(rsts_per_secs) AS pred_3_rsts_per_secs,
    fit_multi(5, rsts_per_secs, packets_per_secs) AS pred_4_rsts_per_secs,
    IF rsts_per_secs > 1 THEN (abs(pred_4_rsts_per_secs - rsts_per_secs) /
       max(abs pred_4_rsts_per_secs, abs rsts_per_secs) +
     abs(pred_3_rsts_per_secs - rsts_per_secs) /
       max(abs pred_3_rsts_per_secs, abs rsts_per_secs) +
     abs(pred_2_rsts_per_secs - rsts_per_secs) /
       max(abs pred_2_rsts_per_secs, abs rsts_per_secs) +
     abs(pred_1_rsts_per_secs - rsts_per_secs) /
       max(abs pred_1_rsts_per_secs, abs rsts_per_secs) +
     abs(pred_0_rsts_per_secs - rsts_per_secs) /
       max(abs pred_0_rsts_per_secs, abs rsts_per_secs)) / 5 ELSE 0 AS abnormality_rsts_per_secs,
    syns_per_secs,
    smooth(syns_per_secs) AS pred_0_syns_per_secs,
    fit(5, syns_per_secs) AS pred_1_syns_per_secs,
    5-ma(syns_per_secs) AS pred_2_syns_per_secs,
    lag(syns_per_secs) AS pred_3_syns_per_secs,
    fit_multi(5, syns_per_secs, packets_per_secs) AS pred_4_syns_per_secs,
    IF syns_per_secs > 1 THEN (abs(pred_4_syns_per_secs - syns_per_secs) /
       max(abs pred_4_syns_per_secs, abs syns_per_secs) +
     abs(pred_3_syns_per_secs - syns_per_secs) /
       max(abs pred_3_syns_per_secs, abs syns_per_secs) +
     abs(pred_2_syns_per_secs - syns_per_secs) /
       max(abs pred_2_syns_per_secs, abs syns_per_secs) +
     abs(pred_1_syns_per_secs - syns_per_secs) /
       max(abs pred_1_syns_per_secs, abs syns_per_secs) +
     abs(pred_0_syns_per_secs - syns_per_secs) /
       max(abs pred_0_syns_per_secs, abs syns_per_secs)) / 5 ELSE 0 AS abnormality_syns_per_secs,
    connections_per_secs,
    smooth(connections_per_secs) AS pred_0_connections_per_secs,
    fit(5, connections_per_secs) AS pred_1_connections_per_secs,
    5-ma(connections_per_secs) AS pred_2_connections_per_secs,
    lag(connections_per_secs) AS pred_3_connections_per_secs,
    IF connections_per_secs > 1 THEN (abs(pred_3_connections_per_secs - connections_per_secs) /
       max(abs pred_3_connections_per_secs, abs connections_per_secs) +
     abs(pred_2_connections_per_secs - connections_per_secs) /
       max(abs pred_2_connections_per_secs, abs connections_per_secs) +
     abs(pred_1_connections_per_secs - connections_per_secs) /
       max(abs pred_1_connections_per_secs, abs connections_per_secs) +
     abs(pred_0_connections_per_secs - connections_per_secs) /
       max(abs pred_0_connections_per_secs, abs connections_per_secs)) / 4 ELSE 0 AS abnormality_connections_per_secs,
    connection_time_avg,
    smooth(connection_time_avg) AS pred_0_connection_time_avg,
    fit(5, connection_time_avg) AS pred_1_connection_time_avg,
    5-ma(connection_time_avg) AS pred_2_connection_time_avg,
    lag(connection_time_avg) AS pred_3_connection_time_avg,
    IF connections_per_secs > 1 THEN (abs(pred_3_connection_time_avg - connection_time_avg) /
       max(abs pred_3_connection_time_avg, abs connection_time_avg) +
     abs(pred_2_connection_time_avg - connection_time_avg) /
       max(abs pred_2_connection_time_avg, abs connection_time_avg) +
     abs(pred_1_connection_time_avg - connection_time_avg) /
       max(abs pred_1_connection_time_avg, abs connection_time_avg) +
     abs(pred_0_connection_time_avg - connection_time_avg) /
       max(abs pred_0_connection_time_avg, abs connection_time_avg)) / 4 ELSE 0 AS abnormality_connection_time_avg;

DEFINE 'TCP minutely: connections anomalies' AS
  FROM 'TCP minutely: connections predictions'
  SELECT
    start,
    (abnormality_connection_time_avg > 0.75 OR
     abnormality_connections_per_secs > 0.75 OR
     abnormality_syns_per_secs > 0.75 OR
     abnormality_rsts_per_secs > 0.75 OR
     abnormality_fins_per_secs > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "connections" AS metric,
    "TCP connections from ${source_name} to ${dest_name} looks abnormal"
      AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: 0-windows predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    zero_windows_per_secs,
    smooth(zero_windows_per_secs) AS pred_0_zero_windows_per_secs,
    fit(5, zero_windows_per_secs) AS pred_1_zero_windows_per_secs,
    5-ma(zero_windows_per_secs) AS pred_2_zero_windows_per_secs,
    lag(zero_windows_per_secs) AS pred_3_zero_windows_per_secs,
    IF zero_windows_per_secs > 1 THEN (abs(pred_3_zero_windows_per_secs - zero_windows_per_secs) /
       max(abs pred_3_zero_windows_per_secs, abs zero_windows_per_secs) +
     abs(pred_2_zero_windows_per_secs - zero_windows_per_secs) /
       max(abs pred_2_zero_windows_per_secs, abs zero_windows_per_secs) +
     abs(pred_1_zero_windows_per_secs - zero_windows_per_secs) /
       max(abs pred_1_zero_windows_per_secs, abs zero_windows_per_secs) +
     abs(pred_0_zero_windows_per_secs - zero_windows_per_secs) /
       max(abs pred_0_zero_windows_per_secs, abs zero_windows_per_secs)) / 4 ELSE 0 AS abnormality_zero_windows_per_secs;

DEFINE 'TCP minutely: 0-windows anomalies' AS
  FROM 'TCP minutely: 0-windows predictions'
  SELECT
    start,
    (abnormality_zero_windows_per_secs > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "0-windows" AS metric,
    "TCP 0-windows from ${source_name} to ${dest_name} looks abnormal"
      AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: RTT predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    rtt_avg,
    smooth(rtt_avg) AS pred_0_rtt_avg,
    fit(5, rtt_avg) AS pred_1_rtt_avg,
    5-ma(rtt_avg) AS pred_2_rtt_avg,
    lag(rtt_avg) AS pred_3_rtt_avg,
    IF sum_rtt_count_src > 10 THEN (abs(pred_3_rtt_avg - rtt_avg) /
       max(abs pred_3_rtt_avg, abs rtt_avg) +
     abs(pred_2_rtt_avg - rtt_avg) /
       max(abs pred_2_rtt_avg, abs rtt_avg) +
     abs(pred_1_rtt_avg - rtt_avg) /
       max(abs pred_1_rtt_avg, abs rtt_avg) +
     abs(pred_0_rtt_avg - rtt_avg) /
       max(abs pred_0_rtt_avg, abs rtt_avg)) / 4 ELSE 0 AS abnormality_rtt_avg;

DEFINE 'TCP minutely: RTT anomalies' AS
  FROM 'TCP minutely: RTT predictions'
  SELECT
    start,
    (abnormality_rtt_avg > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly deteted" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "RTT" AS metric,
    "TCP RTT from ${source_name} to ${dest_name} looks abnormal"
      AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: RD predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    rd_avg,
    smooth(rd_avg) AS pred_0_rd_avg,
    fit(5, rd_avg) AS pred_1_rd_avg,
    5-ma(rd_avg) AS pred_2_rd_avg,
    lag(rd_avg) AS pred_3_rd_avg,
    IF sum_rd_count_src > 10 THEN (abs(pred_3_rd_avg - rd_avg) /
       max(abs pred_3_rd_avg, abs rd_avg) +
     abs(pred_2_rd_avg - rd_avg) /
       max(abs pred_2_rd_avg, abs rd_avg) +
     abs(pred_1_rd_avg - rd_avg) /
       max(abs pred_1_rd_avg, abs rd_avg) +
     abs(pred_0_rd_avg - rd_avg) /
       max(abs pred_0_rd_avg, abs rd_avg)) / 4 ELSE 0 AS abnormality_rd_avg;

DEFINE 'TCP minutely: RD anomalies' AS
  FROM 'TCP minutely: RD predictions'
  SELECT
    start,
    (abnormality_rd_avg > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "RD" AS metric,
    "TCP RD from ${source_name} to ${dest_name} looks abnormal"
      AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);

DEFINE 'TCP minutely: DTT predictions' AS
  FROM 'TCP minutely'
  SELECT
    start,
    start + avg_window AS stop,
    bytes_per_secs,
    dtt_avg,
    smooth(dtt_avg) AS pred_0_dtt_avg,
    fit(5, dtt_avg) AS pred_1_dtt_avg,
    5-ma(dtt_avg) AS pred_2_dtt_avg,
    lag(dtt_avg) AS pred_3_dtt_avg,
    IF sum_dtt_count_src > 10 THEN (abs(pred_3_dtt_avg - dtt_avg) /
       max(abs pred_3_dtt_avg, abs dtt_avg) +
     abs(pred_2_dtt_avg - dtt_avg) /
       max(abs pred_2_dtt_avg, abs dtt_avg) +
     abs(pred_1_dtt_avg - dtt_avg) /
       max(abs pred_1_dtt_avg, abs dtt_avg) +
     abs(pred_0_dtt_avg - dtt_avg) /
       max(abs pred_0_dtt_avg, abs dtt_avg)) / 4 ELSE 0 AS abnormality_dtt_avg;

DEFINE 'TCP minutely: DTT anomalies' AS
  FROM 'TCP minutely: DTT predictions'
  SELECT
    start,
    (abnormality_dtt_avg > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  WHERE
    bytes_per_secs >= min_for_relevance
  NOTIFY "BCN - Anomaly detected" WITH
    firing,
    0.1 * abs(_recent_abnormality - 3/5) AS certainty,
    "DTT" AS metric,
    "TCP DTT from ${source_name} to ${dest_name} looks abnormal"
      AS desc,
    id AS bcn
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);
