-- vim: ft=sql expandtab
-- Track the top links of the cartesian product of zones, and aggregate
-- interesting metrics every minutes.  The "top" links are, for now, the
-- ones with the most distinct individual host-host pairings (approximate).

PARAMETERS
  top_size DEFAULT TO 100,
  top_duration DEFAULT TO 1h,
  obs_window DEFAULT TO 1min,
  false_pos_rate DEFAULT TO 0.1;

-- In c2s and s2c we have a unidirectional view of the IP traffic.
-- Here, we'd like to build a view where all the data concerning all
-- transferts bewtween Z1 and Z2 are in a single tuple.
-- We must then go back to the tcp/udp/icmp and other-ip tables, and
-- takes either client or server columns depending on whether zone_client
-- or ip_client is smaller.
DEFINE c2s AS
  FROM
    ../../../csv/tcp,
    ../../../csv/udp,
    ../../../csv/icmp,
    '../../../csv/other-ip'
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min AND
    (zone_client < zone_server OR
     zone_client = zone_server AND ip_client <= ip_server)
  SELECT
    metric, start, stop,

    zone_client AS zone_1, zone_server AS zone_2,
    vlan_client AS vlan_1, vlan_server AS vlan_2,
    ip_client AS ip_1, ip_server AS ip_2,
    mtu_client AS mtu_1, mtu_server AS mtu_2,

    traffic_packets_client AS packets_1, traffic_packets_server AS packets_2,
    traffic_bytes_client AS bytes_1, traffic_bytes_server AS bytes_2,
    payload_packets_client AS packets_with_payload_1,
    payload_packets_server AS packets_with_payload_2,
    payload_bytes_client AS payload_1, payload_bytes_server AS payload_2,

    rtt_count_client AS rtt_count_1, rtt_count_server AS rtt_count_2,
    rtt_sum_client AS rtt_sum_1, rtt_sum_server AS rtt_sum_2,
    rd_count_client AS rd_count_1, rd_count_server AS rd_count_2;

-- In the other way around for the other tuples:
DEFINE s2c AS
  FROM
    ../../../csv/tcp,
    ../../../csv/udp,
    ../../../csv/icmp,
    '../../../csv/other-ip'
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min AND
    (zone_server < zone_client OR
     zone_server = zone_client AND ip_server < ip_client)
  SELECT
    metric, start, stop,

    zone_server AS zone_1, zone_client AS zone_2,
    vlan_server AS vlan_1, vlan_client AS vlan_2,
    ip_server AS ip_1, ip_client AS ip_2,
    mtu_server AS mtu_1, mtu_client AS mtu_2,

    traffic_packets_server AS packets_1, traffic_packets_client AS packets_2,
    traffic_bytes_server AS bytes_1, traffic_bytes_client AS bytes_2,
    payload_packets_server AS packets_with_payload_1,
    payload_packets_client AS packets_with_payload_2,
    payload_bytes_server AS payload_1, payload_bytes_client AS payload_2,

    rtt_count_server AS rtt_count_1, rtt_count_client AS rtt_count_2,
    rtt_sum_server AS rtt_sum_1, rtt_sum_client AS rtt_sum_2,
    rd_count_server AS rd_count_1, rd_count_client AS rd_count_2;


-- This node merely computes the number of unique host-host connections, and
-- accordingly blanks the zone_src/dst.
-- The number of distinct pairs of hosts is approximated using a single large
-- rotating bloom filter.
DEFINE degraded AS
  FROM c2s, s2c
  MERGE TIMEOUT AFTER 5s
  SELECT
    *,
    NOT REMEMBER (
      false_pos_rate,
      start, -- time
      1h, -- memory duration
      -- What to remember:
      -- Notice we want to avoid remembering a nullable value.
      -- Also, in theory vlan_1 = vlan_2.
      COALESCE(vlan_1, vlan_2, 0), ip_1, ip_2
    ) AS is_new_hosts_pair,
    -- Nullifies the zones if not important:
    IS zone_1, zone_2 IN TOP top_size OVER top_size*5
      BY u32(is_new_hosts_pair)
      IN THE LAST top_duration
      AT TIME start AS _important,
    IF _important THEN zone_1 ELSE NULL AS zone_1,
    IF _important THEN zone_2 ELSE NULL AS zone_2;

-- Now that we have reduced that dimension, we can aggregate on
-- zone_1*zone_2
DEFINE top
  "Statistics about the most important links in between zones (per number of active hosts)."
AS
  FROM degraded
  GROUP BY zone_1, zone_2, start // obs_window
  SELECT
    -- Zone info
    zone_1,
    zone_2,
    sum u32(is_new_hosts_pair) * (1 + false_pos_rate) AS host_pairs
      "Approximate number of active connections using that link.",

    -- Time info
    min start AS _min_start,
    (_min_start // obs_window) * obs_window AS start,
    out.start + obs_window AS stop,

    -- Volumetry 1 -> 2
    sum packets_1 / obs_window AS packets_per_secs_1
      "Packets per seconds (uplink).",
    sum bytes_1 / obs_window AS bytes_per_secs_1
      "Bytes per seconds (uplink).",
    sum payload_1 / obs_window AS payload_bytes_per_secs_1
      "Payload per seconds (uplink).",
    -- Volumetry 2 -> 1
    sum packets_2 / obs_window AS packets_per_secs_2
      "Packets per seconds (downlink).",
    sum bytes_2 / obs_window AS bytes_per_secs_2
      "Bytes per seconds (downlink).",
    sum payload_2 / obs_window AS payload_bytes_per_secs_2
      "Payload per seconds (downlink).",

    -- RTT 1 -> 2 (in seconds)
    sum rtt_sum_1 / sum rtt_count_1 AS avg_rtt_1
      "Average round-trip time (up then down).",
    -- Also try to retain an idea of what the measured max avg had been:
    rtt_sum_1 / rtt_count_1 AS _avg_rtt_1,
    min _avg_rtt_1,
    max _avg_rtt_1,
    -- RTT 2 -> 1
    sum rtt_sum_2 / sum rtt_count_2 AS avg_rtt_2
      "Average round-trip time (down then up).",
    rtt_sum_2 / rtt_count_2 AS _avg_rtt_2,
    min _avg_rtt_2,
    max _avg_rtt_2,

    -- RR: percentage of retransmitted packets over packets with payload
    100 * sum rd_count_1 / sum packets_with_payload_1 AS avg_rr_1
      "Percentage of retransmitted packets over packets with payload (uplink).",
    -- Again, try to retain an idea of the max measured:
    100 * rd_count_1 / packets_with_payload_1 AS _avg_rr_1,
    min _avg_rr_1,
    max _avg_rr_1,
    -- RR 2 -> 1
    100 * sum rd_count_2 / sum packets_with_payload_2 AS avg_rr_2
      "Percentage of retransmitted packets over packets with payload (downlink).",
    -- Again, try to retain an idea of the max measured:
    100 * rd_count_2 / packets_with_payload_2 AS _avg_rr_2,
    min _avg_rr_2,
    max _avg_rr_2,

    -- Everything we can aggregate by zone:
    max mtu_1 DOC "Maximum observed MTU (uplink).",
    max mtu_2 DOC "Maximum observed MTU (downlink)"

    -- TODO: other metrics, but need to be able to select fields present only
    -- in one parent (will be forced nullable and written as NULL by other
    -- parents) ; meanwhile we could also do it using converting nodes but
    -- that will be verbose and less efficient.

  -- We know that the worse hop back in time is less than 60s in the original CSV
  COMMIT AFTER in.start > out.stop + obs_window * 1.1
  FACTORS zone_1, zone_2;
