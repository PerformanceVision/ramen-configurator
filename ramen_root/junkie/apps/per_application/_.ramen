-- vim: ft=sql expandtab

-- For every CSV we have with an application, resample it and group by application.

PARAMETERS
  avg_window {seconds} DEFAULTS TO 60.0;

DEFINE tcp
  "TCP metrics per application and time step."
AS
  FROM ../../../csv/tcp
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second flowing from clients to servers.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second flowing from servers to clients.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second flowing from clients to servers.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second flowing from servers to clients.",
    -- Retransmissions
    sum retrans_traffic_bytes_client / avg_window AS c2s_retrans_bytes_per_sec
      "Bytes per second retransferred from clients to servers.",
    sum retrans_traffic_bytes_server / avg_window AS s2c_retrans_bytes_per_sec
      "Bytes per second retransferred from servers to clients.",
    -- TCP flags
    sum syn_count_client / avg_window AS c2s_syns_per_sec
      "SYN flag per second",
    sum fin_count_client / avg_window AS c2s_fins_per_sec
      "FIN flags from clients to servers per second.",
    sum fin_count_server / avg_window AS s2c_fins_per_sec
      "FIN flags from servers to clients per second.",
    sum rst_count_client / avg_window AS c2s_rsts_per_sec
      "RST flags from clients to servers per second.",
    sum rst_count_server / avg_window AS s2c_rsts_per_sec
      "RST flags from servers to clients per second.",
    sum close_count / avg_window AS close_per_sec
      "Connection teardowns per second.",
    -- TCP issues
    sum dupack_count_client / avg_window AS c2s_dupacks_per_sec
      "DupAcks per second from clients to servers.",
    sum dupack_count_server / avg_window AS s2c_dupacks_per_sec
      "DupAcks per second from servers to clients.",
    sum zero_window_count_client / avg_window AS c2s_0wins_per_sec
      "0-windows per second from clients to servers.",
    sum zero_window_count_server / avg_window AS s2c_0wins_per_sec
      "0-windows per second from servers to clients.",
    -- Average Connection Time
    sum ct_count AS _sum_ct_count,
    sum ct_sum AS _sum_ct_sum,
    _sum_ct_count / avg_window AS ct_per_sec
      "Connection establishments per second.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      _sum_ct_sum / _sum_ct_count AS ct_avg
      "Average connection time.",
    IF _sum_ct_count = 0 THEN 0 ELSE
      sqrt (((sum ct_square_sum - _sum_ct_sum^2) / _sum_ct_count)) AS ct_stddev
      "Standard deviation of the connection time.",
    -- Average Server Response Time
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / avg_window AS srt_per_sec
      "Number of query/response pairs per second.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rt_square_sum_server - _sum_rt_sum_server^2) /
            _sum_rt_count_server) AS srt_stddev
      "Standard deviation of the response time.",
    -- Average Round Trip Time CSC
    sum rtt_count_server AS _sum_rtt_count_server,
    sum rtt_sum_server AS _sum_rtt_sum_server,
    _sum_rtt_count_server / avg_window AS crtt_per_sec
      "Measured client→server→client round trip times per second.",
    IF _sum_rtt_count_server = 0 THEN 0 ELSE
      _sum_rtt_sum_server / _sum_rtt_count_server AS crtt_avg
      "Average client→server→client round trip time.",
    IF _sum_rtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_server - _sum_rtt_sum_server^2) /
            _sum_rtt_count_server) AS crtt_stddev
      "Standard deviation of the client→server→client round trip time.",
    -- Average Round Trip Time SCS
    sum rtt_count_client AS _sum_rtt_count_client,
    sum rtt_sum_client AS _sum_rtt_sum_client,
    _sum_rtt_count_client / avg_window AS srtt_per_sec
      "Measured server→client→server round trip times per second.",
    IF _sum_rtt_count_client = 0 THEN 0 ELSE
      _sum_rtt_sum_client / _sum_rtt_count_client AS srtt_avg
      "Average server→client→server round trip time.",
    IF _sum_rtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_client - _sum_rtt_sum_client^2) /
            _sum_rtt_count_client) AS srtt_stddev
      "Standard deviation of the server→client→server round trip time.",
    -- Average Retransmission Delay C2S
    sum rd_count_client AS _sum_rd_count_client,
    sum rd_sum_client AS _sum_rd_sum_client,
    _sum_rd_count_client / avg_window AS crd_per_sec
      "Measured retransmission delays per second.",
    IF _sum_rd_count_client = 0 THEN 0 ELSE
      _sum_rd_sum_client / _sum_rd_count_client AS crd_avg,
      "Average retransmission delay."
    IF _sum_rd_count_client = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_client - _sum_rd_sum_client^2) /
            _sum_rd_count_client) AS crd_stddev
      "Standard deviation of the retransmission delays.",
    -- Average Retransmission Delay S2C
    sum rd_count_server AS _sum_rd_count_server,
    sum rd_sum_server AS _sum_rd_sum_server,
    _sum_rd_count_server / avg_window AS srd_per_sec
      "Measured clients to servers retransmission delays per second.",
    IF _sum_rd_count_server = 0 THEN 0 ELSE
      _sum_rd_sum_server / _sum_rd_count_server AS srd_avg
      "Average clients to servers retransmission delay.",
    IF _sum_rd_count_server = 0 THEN 0 ELSE
      sqrt ((sum rd_square_sum_server - _sum_rd_sum_server^2) /
            _sum_rd_count_server) AS srd_stddev
      "Standard deviation of the clients to servers retransmission delay.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / avg_window AS cdtt_per_sec
      "Measured clients to servers data transfer time per second.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_client - _sum_dtt_sum_client^2) /
            _sum_dtt_count_client) AS cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / avg_window AS sdtt_per_sec
      "Measured servers to clients data transfer time per second.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_server - _sum_dtt_sum_server^2) /
            _sum_dtt_count_server) AS sdtt_stddev
      "Standard deviation of the servers to clients data transfer time."
  WHERE
    ip_external IS NULL -- Exclude netflow
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE udp
  "UDP metrics per application and time step."
AS
  FROM ../../../csv/udp
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second from server."
  WHERE
    ip_external IS NULL -- Exclude netflow
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE icmp
  "ICMP metrics per application and time step."
AS
  FROM ../../../csv/icmp
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second from server.",
    -- Errors
    -- As soon as we handle factors in set-alerts (ie. either select one value or
    -- sum all values or take the min or max) then also group by icmp_type and code.
    sum u32(error_ip4_server is not null OR error_ip6_server is not null OR
            error_port_server is not null) / avg_window AS errors_per_sec
      "ICMP errors per second."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE 'other-ip'
  "'Other-ip' metrics per application and time step."
AS
  FROM '../../../csv/other-ip'
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second from server."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE 'non-ip'
  "Non-IP metrics per application and time step."
AS
  FROM '../../../csv/non-ip'
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum traffic_bytes_client / avg_window AS c2s_bytes_per_sec
      "Bytes per second from client.",
    sum traffic_bytes_server / avg_window AS s2c_bytes_per_sec
      "Bytes per second from server.",
    sum traffic_packets_client / avg_window AS c2s_packets_per_sec
      "Packets per second from client.",
    sum traffic_packets_server / avg_window AS s2c_packets_per_sec
      "Packets per second from server."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE http
  "HTTP metrics per application and time step."
AS
  FROM ../../../csv/http
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    sum u32(timeouted) / _count AS timeout_ratio
      "Ratio of transactions that timed out during capture.",
    sum u32(compressed) / _count AS compressed_ratio
      "Ratio of compressed response bodies.",
    sum u32(chunked_encoding) / _count AS chunked_encoded_ratio
      "Ratio of bodies using the chunked encoding.",
    sum u32(not contributed) / avg_window AS pages_per_sec
      "Ratio of top-level documents.",
    sum query_headers / avg_window AS query_header_bytes_per_sec
      "Header bytes per second in queries.",
    sum query_payload / avg_window AS query_payload_bytes_per_sec
      "Payload bytes per second in queries.",
    sum query_pkts / avg_window AS query_pkts_per_sec
      "Packets per second in queries.",
    sum query_content_length / avg_window AS query_content_bytes_per_sec
      "Body bytes per second in queries.",
    sum resp_headers / avg_window AS resp_header_bytes_per_sec
      "Header bytes per second in responses.",
    sum resp_payload / avg_window AS resp_payload_bytes_per_sec
      "Payload bytes per second in responses.",
    sum resp_pkts / avg_window AS resp_pkts_per_sec
      "Packets per second in responses.",
    sum resp_content_length / avg_window AS resp_content_bytes_per_sec
      "Body bytes per second in responses.",
    -- These redundant metrics make me nervous:
    sum tot_volume_query / avg_window AS query_bytes_per_sec
      "Bytes per second in queries.",
    sum tot_volume_response / avg_window AS resp_bytes_per_sec
      "Butes per second in responses.",
    -- Status:
    _count / avg_window AS hits_per_sec "Queries per second.",
    -- tot_count = number of sub-hits in a page, 0 when not a page
    sum u32(tot_count > 0) AS _num_pages,
    sum tot_count / _num_pages AS avg_hits_per_page
      "Average number of queries per page.",
    sum tot_errors / _count AS error_ratio "Error ratio.",
    -- Also count separately the number of 1xx, 2xx, 3xx, 4xx and 5xx:
    sum u32(resp_code >= 100 AND resp_code < 200) / _count AS '1xx_ratio'
      "Ratio of 1xx errors.",
    sum u32(resp_code >= 200 AND resp_code < 300) / _count AS '2xx_ratio'
      "Ratio of 2xx errors.",
    sum u32(resp_code >= 300 AND resp_code < 400) / _count AS '3xx_ratio'
      "Ratio of 3xx errors.",
    sum u32(resp_code >= 400 AND resp_code < 500) / _count AS '4xx_ratio'
      "Ratio of 4xx errors.",
    sum u32(resp_code >= 500 AND resp_code < 600) / _count AS '5xx_ratio'
      "Ratio of 5xx errors.",
    -- Timings:
    -- Client DTT:
    query_end_ts - query_begin_ts AS _cdtt,
    min _cdtt DOC "Minimum client DTT.",
    max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    90th percentile (sample(1000, _cdtt)) AS cdtt_90th
      "Approximate 90th percentile of client DTT.",
    95th percentile (sample(1000, _cdtt)) AS cdtt_95th
      "Approximate 95th percentile of client DTT.",
    99th percentile (sample(1000, _cdtt)) AS cdtt_99th
      "Approximate 99th percentile of client DTT.",
    --HISTOGRAM(_cdtt, 0s, 1min, 20) AS cdtt_distribution,
    -- Response time:
    resp_begin_ts - query_end_ts AS _rt,
    min _rt DOC "Minimum response time.",
    max _rt DOC "Maximum response time.",
    avg _rt DOC "Average response time.",
    90th percentile (sample(1000, _rt)) AS rt_90th
      "Approximate 90th percentile of response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    99th percentile (sample(1000, _rt)) AS rt_99th
      "Approximate 99th percentile of response time.",
    --HISTOGRAM(_rt, 0s, 1min, 20) AS rt_distribution,
    -- Server DTT:
    resp_end_ts - resp_begin_ts AS _sdtt,
    min _sdtt DOC "Minimum server DTT.",
    max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT.",
    90th percentile (sample(1000, _sdtt)) AS sdtt_90th
      "Approximate 90th percentile of server DTT.",
    95th percentile (sample(1000, _sdtt)) AS sdtt_95th
      "Approximate 95th percentile of server DTT.",
    99th percentile (sample(1000, _sdtt)) AS sdtt_99th
      "Approximate 99th percentile of server DTT.",
    --HISTOGRAM(_sdtt, 0s, 1min, 20) AS sdtt_distribution
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE citrix
  "Citrix metrics per application and time step."
AS
  FROM ../../../csv/citrix
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes:
    sum pdus_client AS _sum_pdus_client,
    _sum_pdus_client / avg_window AS pdus_client_per_sec
      "PDUs from clients per second.",
    sum pdus_server AS _sum_pdus_server,
    _sum_pdus_server / avg_window AS pdus_server_per_sec
      "PDUs from servers per second.",
    sum nb_compressed_client / _sum_pdus_client AS compressed_client_ratio
      "Ratio of compressed PDUs from clients.",
    sum nb_compressed_server / _sum_pdus_server AS compressed_server_ratio
      "Ratio of compressed PDUs from servers.",
    sum payloads_client / avg_window AS payloads_client_bytes_per_sec
      "Payload bytes per second from clients.",
    sum payloads_server / avg_window AS payloads_server_bytes_per_sec
      "Payload bytes per second from servers.",
    -- Timings:
    -- Average Response Times:
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / avg_window AS srt_per_sec
      "Measured response times per second.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rt_square_sum_server - _sum_rt_sum_server^2) /
            _sum_rt_count_server) AS srt_stddev
      "Standard deviation of the response times.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / avg_window AS cdtt_per_sec
      "Measured clients to servers data transfer times per second.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_client - _sum_dtt_sum_client^2) /
            _sum_dtt_count_client) AS cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / avg_window AS sdtt_per_sec
      "Measured servers to clients data transfer times per second.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_server - _sum_dtt_sum_server^2) /
            _sum_dtt_count_server) AS sdtt_stddev
      "Standard deviation of the servers to clients data transfer time."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE citrix_chanless
  "'Citrix-Chaless' metrics per application and time step."
AS
  FROM ../../../csv/citrix_chanless
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes:
    sum pdus_client / avg_window AS pdus_client_per_sec
      "PDUs from clients per second.",
    sum pdus_server / avg_window AS pdus_server_per_sec
      "PDUs from servers per second.",
    sum pdus_cgp_client / avg_window AS pdus_cgp_client_per_sec,
    sum pdus_cgp_server / avg_window AS pdus_cgp_server_per_sec,
    sum nb_keep_alives_client / avg_window AS client_keep_alives_per_sec
      "Keep alives from clients per second.",
    sum nb_keep_alives_server / avg_window AS server_keep_alives_per_sec
      "Keep alives from server per second.",
    sum payloads_client / avg_window AS payloads_client_bytes_per_sec
      "Payload bytes per second from clients.",
    sum payloads_server / avg_window AS payloads_server_bytes_per_sec
      "Payload bytes per second from servers.",
    sum nb_aborts / avg_window AS aborts_per_sec
      "Aborts per second.",
    -- rather nb_timeouts / pdus_client or similar?
    sum nb_timeouts / avg_window AS timeouts_per_sec
      "Timeouts per second.",
    -- Timings:
    -- Average Response Times:
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / avg_window AS srt_per_sec
      "Measured response times per second.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average response time.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rt_square_sum_server - _sum_rt_sum_server^2) /
            _sum_rt_count_server) AS srt_stddev
      "Standard deviation of the response time.",
    -- Average Data Transfer Time C2S
    sum dtt_count_client AS _sum_dtt_count_client,
    sum dtt_sum_client AS _sum_dtt_sum_client,
    _sum_dtt_count_client / avg_window AS cdtt_per_sec
      "Measured clients to servers data transfer times per second.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      _sum_dtt_sum_client / _sum_dtt_count_client AS cdtt_avg
      "Average clients to servers data transfer time.",
    IF _sum_dtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_client - _sum_dtt_sum_client^2) /
            _sum_dtt_count_client) AS cdtt_stddev
      "Standard deviation of the clients to servers data transfer time.",
    -- Average Data Transfer Time S2C
    sum dtt_count_server AS _sum_dtt_count_server,
    sum dtt_sum_server AS _sum_dtt_sum_server,
    _sum_dtt_count_server / avg_window AS sdtt_per_sec
      "Measured servers to clients data transfer times per second.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      _sum_dtt_sum_server / _sum_dtt_count_server AS sdtt_avg
      "Average servers to clients data transfer time.",
    IF _sum_dtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum dtt_square_sum_server - _sum_dtt_sum_server^2) /
            _sum_dtt_count_server) AS sdtt_stddev
      "Standard deviation of the servers to clients data transfer time.",
    -- Average Login Time:
    sum login_time_count AS _sum_login_time_count,
    sum login_time_sum AS _sum_login_time_sum,
    _sum_login_time_count / avg_window AS slogin_time_per_sec
      "Measured login times per second.",
    IF _sum_login_time_count = 0 THEN 0 ELSE
      _sum_login_time_sum / _sum_login_time_count AS slogin_time_avg
      "Average login time.",
    IF _sum_login_time_count = 0 THEN 0 ELSE
      sqrt ((sum login_time_square_sum - _sum_login_time_sum^2) /
            _sum_login_time_count) AS slogin_time_stddev
      "Standard deviation of the login time.",
    -- Average Launch Time:
    sum launch_time_count AS _sum_launch_time_count,
    sum launch_time_sum AS _sum_launch_time_sum,
    _sum_launch_time_count / avg_window AS slaunch_time_per_sec
      "Measured launch times per second.",
    IF _sum_launch_time_count = 0 THEN 0 ELSE
      _sum_launch_time_sum / _sum_launch_time_count AS slaunch_time_avg
      "Average launch time.",
    IF _sum_launch_time_count = 0 THEN 0 ELSE
      sqrt ((sum launch_time_square_sum - _sum_launch_time_sum^2) /
            _sum_launch_time_count) AS slaunch_time_stddev
      "Standard deviation of the launch time."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE smb
  "SMB metrics per application and time step."
AS
  FROM ../../../csv/smb
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    sum u32(timeouted) / _count AS timeout_ratio
      "Ratio of transactions that timed out during capture.",
    sum u32(is_error) / _count AS error_ratio
      "Error ratio.",
    sum u32(is_warning) / _count AS warning_ratio
      "Warning ratio.",
    sum query_payload / avg_window AS query_payload_bytes_per_sec
      "Payload bytes per second in queries.",
    sum query_pkts / avg_window AS query_pkts_per_sec
      "Packets per second in queries.",
    sum resp_payload / avg_window AS resp_payload_bytes_per_sec
      "Payload bytes per second in responses.",
    sum resp_pkts / avg_window AS resp_pkts_per_sec
      "Packets per second in responses.",
    -- FIXME: what is this?
    sum meta_read_bytes / avg_window AS meta_read_bytes_per_sec
      "Bytes per second read (meta).",
    sum meta_write_bytes / avg_window AS meta_write_bytes_per_sec
      "Bytes per second write (meta).",
    sum query_write_bytes / avg_window AS query_write_bytes_per_sec
      "Bytes per second in write queries.",
    sum resp_read_bytes / avg_window AS resp_read_bytes_per_sec
      "Bytes per second in read responses.",
    sum resp_write_bytes / avg_window AS resp_write_bytes_per_sec
      "bytes per second in write responses.",
    -- Timings:
    -- Client DTT:
    query_end_ts - query_begin_ts AS _cdtt,
    min _cdtt DOC "Minimum client DTT.",
    max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    90th percentile (sample(1000, _cdtt)) AS cdtt_90th
      "Approximate 90th percentile of client DTT.",
    95th percentile (sample(1000, _cdtt)) AS cdtt_95th
      "Approximate 95th percentile of client DTT.",
    99th percentile (sample(1000, _cdtt)) AS cdtt_99th
      "Approximate 99th percentile of client DTT.",
    --HISTOGRAM(_cdtt, 0s, 1min, 20) AS cdtt_distribution,
    -- Response time:
    resp_begin_ts - query_end_ts AS _rt,
    min _rt DOC "Minimum response time.",
    max _rt DOC "Maximum response time.",
    avg _rt DOC "Average response time.",
    90th percentile (sample(1000, _rt)) AS rt_90th
      "Approximate 90th percentile of response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    99th percentile (sample(1000, _rt)) AS rt_99th
      "Approximate 99th percentile of response time.",
    --HISTOGRAM(_rt, 0s, 1min, 20) AS rt_distribution,
    -- Server DTT:
    resp_end_ts - resp_begin_ts AS _sdtt,
    min _sdtt DOC "Minimum server DTT.",
    max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT.",
    90th percentile (sample(1000, _sdtt)) AS sdtt_90th
      "Approximate 90th percentile of server DTT.",
    95th percentile (sample(1000, _sdtt)) AS sdtt_95th
      "Approximate 95th percentile of server DTT.",
    99th percentile (sample(1000, _sdtt)) AS sdtt_99th
      "Approximate 99th percentile of server DTT.",
    --HISTOGRAM(_sdtt, 0s, 1min, 20) AS sdtt_distribution
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE sql
  "SQL metrics per application and time step."
AS
  FROM ../../../csv/sql
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    sum u32(timeouted) / _count AS timeout_ratio
      "Ratio of transactions that timed out during capture.",
    sum u32(is_error) / _count AS error_ratio
      "Error ratio.",
    sum query_payload / avg_window AS query_payload_bytes_per_sec
      "Payload bytes per second in queries.",
    sum query_pkts / avg_window AS query_pkts_per_sec
      "Packets per second in queries.",
    sum resp_payload / avg_window AS resp_payload_bytes_per_sec
      "Payload bytes per second in responses.",
    sum resp_pkts / avg_window AS resp_pkts_per_sec
      "Packets per second in responses.",
    -- Timings:
    -- Client DTT:
    query_end_ts - query_begin_ts AS _cdtt,
    min _cdtt DOC "Minimum client DTT.",
    max _cdtt DOC "Maximum client DTT.",
    avg _cdtt DOC "Average client DTT.",
    90th percentile (sample(1000, _cdtt)) AS cdtt_90th
      "Approximate 90th percentile of client DTT.",
    95th percentile (sample(1000, _cdtt)) AS cdtt_95th
      "Approximate 95th percentile of client DTT.",
    99th percentile (sample(1000, _cdtt)) AS cdtt_99th
      "Approximate 99th percentile of client DTT.",
    --HISTOGRAM(_cdtt, 0s, 1min, 20) AS cdtt_distribution,
    -- Response time:
    resp_begin_ts - query_end_ts AS _rt,
    min _rt DOC "Minimum response time.",
    max _rt DOC "Maximum response time.",
    avg _rt DOC "Average response time.",
    90th percentile (sample(1000, _rt)) AS rt_90th
      "Approximate 90th percentile of response time.",
    95th percentile (sample(1000, _rt)) AS rt_95th
      "Approximate 95th percentile of response time.",
    99th percentile (sample(1000, _rt)) AS rt_99th
      "Approximate 99th percentile of response time.",
    --HISTOGRAM(_rt, 0s, 1min, 20) AS rt_distribution,
    -- Server DTT:
    resp_end_ts - resp_begin_ts AS _sdtt,
    min _sdtt DOC "Minimum server DTT.",
    max _sdtt DOC "Maximum server DTT.",
    avg _sdtt DOC "Average server DTT.",
    90th percentile (sample(1000, _sdtt)) AS sdtt_90th
      "Approximate 90th percentile of server DTT.",
    95th percentile (sample(1000, _sdtt)) AS sdtt_95th
      "Approximate 95th percentile of server DTT.",
    99th percentile (sample(1000, _sdtt)) AS sdtt_99th
      "Approximate 99th percentile of server DTT.",
    --HISTOGRAM(_sdtt, 0s, 1min, 20) AS sdtt_distribution
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;

DEFINE voip
  "VoIP metrics per application and time step."
AS
  FROM ../../../csv/voip
  SELECT
    -- Time
    (start // u32(avg_window)) * u32(avg_window) AS start,
    out.start + avg_window AS stop,
    application DOC "Application",
    -- Volumes
    sum 1 AS _count,
    sum u32(had_voice) / _count AS with_voice_ratio
      "Ratio of calls with voice.",
    sum u32(call_direction_is_out) / _count AS outbind_call_ratio
      "Ratio of outbound calls.",
    sum sign_bytes_client / avg_window AS client_sign_bytes_per_sec
      "Bytes per second from clients signalisation.",
    sum sign_bytes_server / avg_window AS server_sign_bytes_per_sec
      "Bytes per second from servers signalisation.",
    sum sign_payload_client / avg_window AS client_sign_payload_per_sec
      "Payload bytes per second from clients signalisation.",
    sum sign_payload_server / avg_window AS server_sign_payload_per_sec
      "Payload bytes per second from servers signalisation.",
    sum rtp_rtcp_bytes_client / avg_window AS client_rtp_rtcp_bytes_per_sec
      "Bytes per second from clients voice.",
    sum rtp_rtcp_bytes_server / avg_window AS server_rtp_rtcp_bytes_per_sec
      "Bytes per second from servers voice.",
    sum rtp_rtcp_payload_client / avg_window AS client_rtp_rtcp_payload_per_sec
      "Payload bytes per second from clients voice.",
    sum rtp_rtcp_payload_server / avg_window AS server_rtp_rtcp_payload_per_sec
      "Payload bytes per second from servers voice.",
    -- Timings
    -- Average Server Response Time
    sum rt_count_server AS _sum_rt_count_server,
    sum rt_sum_server AS _sum_rt_sum_server,
    _sum_rt_count_server / avg_window AS srt_per_sec
      "Measured server response times per second.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      _sum_rt_sum_server / _sum_rt_count_server AS srt_avg
      "Average server response time.",
    IF _sum_rt_count_server = 0 THEN 0 ELSE
      sqrt ((sum rt_square_sum_server - _sum_rt_sum_server^2) /
            _sum_rt_count_server) AS srt_stddev
      "Standard deviation of the server response time.",
    -- Jitter caller
    sum jitter_count_caller AS _sum_jitter_count_caller,
    sum jitter_sum_caller AS _sum_jitter_sum_caller,
    _sum_jitter_count_caller / avg_window AS caller_jitter_per_sec
      "Measured jitters from caller per second.",
    IF _sum_jitter_count_caller = 0 THEN 0 ELSE
      _sum_jitter_sum_caller / _sum_jitter_count_caller AS caller_jitter
      "Average jitter from caller.",
    IF _sum_jitter_count_caller = 0 THEN 0 ELSE
      sqrt ((sum jitter_square_sum_caller - _sum_jitter_sum_caller^2) /
            _sum_jitter_count_caller) AS caller_jitter_stddev
      "Standard deviation of the jitter from caller.",
    -- Jitter callee
    sum jitter_count_callee AS _sum_jitter_count_callee,
    sum jitter_sum_callee AS _sum_jitter_sum_callee,
    _sum_jitter_count_callee / avg_window AS callee_jitter_per_sec
      "Measured jitters from callee per second.",
    IF _sum_jitter_count_callee = 0 THEN 0 ELSE
      _sum_jitter_sum_callee / _sum_jitter_count_callee AS callee_jitter_avg
      "Average jitter from callee.",
    IF _sum_jitter_count_callee = 0 THEN 0 ELSE
      sqrt ((sum jitter_square_sum_callee - _sum_jitter_sum_callee^2) /
            _sum_jitter_count_callee) AS callee_jitter_stddev
      "Standard deviation of the jitter from callee.",
    -- RTT CalleeCallerCallee
    sum rtt_count_caller AS _sum_rtt_count_caller,
    sum rtt_sum_caller AS _sum_rtt_sum_caller,
    _sum_rtt_count_caller / avg_window AS caller_rtt_per_sec
      "Measured callee→caller→callee round trip times per second.",
    IF _sum_rtt_count_caller = 0 THEN 0 ELSE
      _sum_rtt_sum_caller / _sum_rtt_count_caller AS caller_rtt_avg
      "Average callee→caller→callee round trip time.",
    IF _sum_rtt_count_caller = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_caller - _sum_rtt_sum_caller^2) /
            _sum_rtt_count_caller) AS caller_rtt_stddev
      "Standard deviation of the callee→caller→callee round trip time.",
    -- caller→callee→caller round trip time
    sum rtt_count_callee AS _sum_rtt_count_callee,
    sum rtt_sum_callee AS _sum_rtt_sum_callee,
    _sum_rtt_count_callee / avg_window AS callee_rtt_per_sec
      "Measured caller→callee→caller round trip times per second.",
    IF _sum_rtt_count_callee = 0 THEN 0 ELSE
      _sum_rtt_sum_callee / _sum_rtt_count_callee AS callee_rtt_avg
      "Average caller→callee→caller round trip time.",
    IF _sum_rtt_count_callee = 0 THEN 0 ELSE
      sqrt ((sum rtt_square_sum_callee - _sum_rtt_sum_callee^2) /
            _sum_rtt_count_callee) AS callee_rtt_stddev
      "Standard deviation of the caller→callee→caller round trip time.",
    -- Losses (alt count)
    sum loss_callee2caller_alt_count / avg_window AS loss_callee2caller_per_sec
      "callee2caller_alt_count bytes per second in loss.",
    sum loss_caller2callee_alt_count / avg_window AS loss_caller2callee_per_sec
      "caller2callee_alt_count bytes per second in loss.",
    -- signalisation client→server→client round trip time
    sum sign_rtt_count_server AS _sum_sign_rtt_count_server,
    sum sign_rtt_sum_server AS _sum_sign_rtt_sum_server,
    _sum_sign_rtt_count_server / avg_window AS sign_srtt_per_sec
      "Measured signalisation client→server→client round trip time. per second.",
    IF _sum_sign_rtt_count_server = 0 THEN 0 ELSE
      _sum_sign_rtt_sum_server / _sum_sign_rtt_count_server AS sign_srtt_avg
      "Average signalisation client→server→client round trip time.",
    IF _sum_sign_rtt_count_server = 0 THEN 0 ELSE
      sqrt ((sum sign_rtt_square_sum_server - _sum_sign_rtt_sum_server^2) /
            _sum_sign_rtt_count_server) AS sign_srtt_stddev
      "Standard deviation of the signalisation client→server→client round trip time.",
    -- signalisation server→client→server round trip time
    sum sign_rtt_count_client AS _sum_sign_rtt_count_client,
    sum sign_rtt_sum_client AS _sum_sign_rtt_sum_client,
    _sum_sign_rtt_count_client / avg_window AS sign_crtt_per_sec
      "Measured signalisation server→client→server round trip times per second.",
    IF _sum_sign_rtt_count_client = 0 THEN 0 ELSE
      _sum_sign_rtt_sum_client / _sum_sign_rtt_count_client AS sign_crtt_avg
      "Average signalisation server→client→server round trip time.",
    IF _sum_sign_rtt_count_client = 0 THEN 0 ELSE
      sqrt ((sum sign_rtt_square_sum_client - _sum_sign_rtt_sum_client^2) /
            _sum_sign_rtt_count_client) AS sign_crtt_stddev
      "Standard deviation of the signalisation server→client→server round trip time.",
    -- Signalisation Average Retransmission Delay S2C
    sum sign_rd_count_server AS _sum_sign_rd_count_server,
    sum sign_rd_sum_server AS _sum_sign_rd_sum_server,
    _sum_sign_rd_count_server / avg_window AS sign_srd_per_sec
      "Measured signalisation retransmission delays from servers per second.",
    IF _sum_sign_rd_count_server = 0 THEN 0 ELSE
      _sum_sign_rd_sum_server / _sum_sign_rd_count_server AS sign_srd_avg
      "Average signalisation retransmission delay from servers.",
    IF _sum_sign_rd_count_server = 0 THEN 0 ELSE
      sqrt ((sum sign_rd_square_sum_server - _sum_sign_rd_sum_server^2) /
            _sum_sign_rd_count_server) AS sign_srd_stddev
      "Standard deviation of the signalisation retransmission delay from servers.",
    -- Signalisation Average Retransmission Delay C2S
    sum sign_rd_count_client AS _sum_sign_rd_count_client,
    sum sign_rd_sum_client AS _sum_sign_rd_sum_client,
    _sum_sign_rd_count_client / avg_window AS sign_crd_per_sec
      "Measured signalisation retransmission delays from clients per second.",
    IF _sum_sign_rd_count_client = 0 THEN 0 ELSE
      _sum_sign_rd_sum_client / _sum_sign_rd_count_client AS sign_crd_avg
      "Average signalisation retransmission delay from clients.",
    IF _sum_sign_rd_count_client = 0 THEN 0 ELSE
      sqrt ((sum sign_rd_square_sum_client - _sum_sign_rd_sum_client^2) /
            _sum_sign_rd_count_client) AS sign_crd_stddev
      "Standard deviation of the signalisation retransmission delay from clients."
  GROUP BY start // u32(avg_window), application
  COMMIT AFTER
    in.start > out.start + 2 * avg_window
  FACTOR application;
