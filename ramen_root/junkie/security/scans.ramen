PARAMETERS
  false_pos_rate DEFAULT TO 0.1, -- 10% of false positives
  max_ports DEFAULT TO 50,
  max_hosts DEFAULT TO 100,
  top_size DEFAULT TO 20,
  top_max_size DEFAULT TO 100k;

DEFINE 'top port scans'
  "Detection of port scanners."
AS
  FROM
    ../../csv/tcp,
    ../../csv/udp
  MERGE TIMEOUT AFTER 5s
  WHERE
    start > merge.greatest.start - 3min AND
    IS ip_client, ip_server IN TOP top_size OVER top_max_size BY (
      u32(
        NOT remember globally (
          false_pos_rate, start, 3600,
          -- We do not take into account IP proto, so a ping on a TCP port
          -- grants you a free ping on the same UDP port.
          ip_client, ip_server, port_server)))
      IN THE LAST 1h
  SELECT
    min start AS start,
    max stop AS stop,
    ip_client,
    ip_server,
    (1 + false_pos_rate) * sum 1 as port_count
      "Approximate number of ports probed by the client to this server"
  GROUP BY start // 3600, ip_client, ip_server
  COMMIT AFTER in.start > out.start + 1h2m
  FACTOR ip_client, ip_server;

DEFINE 'port scan alert' AS
  FROM 'top port scans'
  WHEN port_count > max_ports
  NOTIFY "Port-Scan from ${ip_client} to ${ip_server}" WITH
    reldiff(port_count, max_ports) AS certainty,
    "${ip_client} has probed at least ${port_count} ports of ${ip_server} from ${start} to ${stop}'" AS desc,
    "${ip_client},${ip_server}" AS ips,
    "${port_count}" AS values,
    "${max_ports}" AS thresholds;

DEFINE 'top ip scans'
  "Detection of host scanners."
AS
  FROM
    ../../csv/tcp,
    ../../csv/udp,
    ../../csv/icmp,
    '../../csv/other-ip'
  MERGE TIMEOUT AFTER 5s
  WHEN
    start > merge.greatest.start - 3min AND
    IS ip_client IN TOP top_size OVER top_max_size BY (
      U32(
        NOT remember globally (
        false_pos_rate, start, 3600,
        -- An IP scanner could use varying proto/port to detect host
        -- presence so we just care about src and dst here:
        ip_client, ip_server)))
      IN THE LAST 1h
  SELECT
    min start AS start,
    max stop AS stop,
    ip_client,
    (1 + false_pos_rate) * sum 1 as ip_count
      "Approximate number of hosts probed by this client."
  GROUP BY start // 3600, ip_client
  COMMIT AFTER in.start > out.start + 1h2m
  FACTORS ip_client;

DEFINE 'ip_scan_alert' AS
  FROM 'top ip scans'
  WHEN ip_count > max_hosts
  NOTIFY "IP-Scan from ${ip_client}" WITH
    reldiff(ip_count, max_hosts) AS certainty,
    "${ip_client}" AS ips,
    "${ip_count}" AS values,
    "${max_hosts}" AS thresholds;
