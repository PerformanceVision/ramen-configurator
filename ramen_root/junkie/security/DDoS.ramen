PARAMETERS
  avg_win DEFAULTS TO 2min,
  false_pos_rate DEFAULT TO 0.1; -- 10% of false positives
  -- TODO: also remember durations?

DEFINE 'new peers'
  "Approximation of the number of new unique clients and socket pairs."
AS
  FROM
    ../../csv/tcp,
    ../../csv/udp,
    ../../csv/icmp,
    '../../csv/other-ip'
  MERGE TIMEOUT AFTER 5s
  WHERE start > merge.greatest.start - 3min
  SELECT
    (start // avg_win) * avg_win AS start,
    out.start + avg_win AS stop,
    min start, max stop,
    -- Traffic (of any kind) we haven't seen in the last hour.
    -- Increase the estimate of *not* remembering since we ask for 10% of
    -- false positives.
    sum ((1 + false_pos_rate) * float(not remember (
           false_pos_rate,
           start, 1h,
           ip_client, ip_server))) / avg_win
        AS nb_new_cnxs_per_secs
        "Approximate number of newly communicating hosts (as in: hosts that were not communicating for at least one hour)",
    -- Clients we haven't seen in the last hour.
    sum ((1 + false_pos_rate) * float(not remember (
           false_pos_rate, start, 1h, ip_client))) / avg_win
        AS nb_new_clients_per_secs
        "Approximate number of new clients (as in: hosts that were not clients of anything for at least one hour)"
  GROUP BY start // avg_win
  COMMIT AFTER
    in.start > out.min_start  + 2 * u64(avg_win);

DEFINE 'new peers: DDoS predictions' AS
  FROM 'new peers'
  SELECT
    start,
    nb_new_cnxs_per_secs,
    smooth(nb_new_cnxs_per_secs) AS pred_0_nb_new_cnxs_per_secs,
    fit(5, nb_new_cnxs_per_secs) AS pred_1_nb_new_cnxs_per_secs,
    5-ma(nb_new_cnxs_per_secs) AS pred_2_nb_new_cnxs_per_secs,
    lag(nb_new_cnxs_per_secs) AS pred_3_nb_new_cnxs_per_secs,
    IF nb_new_cnxs_per_secs > 1 THEN (abs(pred_3_nb_new_cnxs_per_secs - nb_new_cnxs_per_secs) /
       max(abs pred_3_nb_new_cnxs_per_secs, abs nb_new_cnxs_per_secs) +
     abs(pred_2_nb_new_cnxs_per_secs - nb_new_cnxs_per_secs) /
       max(abs pred_2_nb_new_cnxs_per_secs, abs nb_new_cnxs_per_secs) +
     abs(pred_1_nb_new_cnxs_per_secs - nb_new_cnxs_per_secs) /
       max(abs pred_1_nb_new_cnxs_per_secs, abs nb_new_cnxs_per_secs) +
     abs(pred_0_nb_new_cnxs_per_secs - nb_new_cnxs_per_secs) /
       max(abs pred_0_nb_new_cnxs_per_secs, abs nb_new_cnxs_per_secs)) / 4 ELSE 0
        AS abnormality_nb_new_cnxs_per_secs,
    nb_new_clients_per_secs,
    smooth(nb_new_clients_per_secs) AS pred_0_nb_new_clients_per_secs,
    fit(5, nb_new_clients_per_secs) AS pred_1_nb_new_clients_per_secs,
    5-ma(nb_new_clients_per_secs) AS pred_2_nb_new_clients_per_secs,
    lag(nb_new_clients_per_secs) AS pred_3_nb_new_clients_per_secs,
    IF nb_new_clients_per_secs > 1 THEN (abs(pred_3_nb_new_clients_per_secs - nb_new_clients_per_secs) /
       max(abs pred_3_nb_new_clients_per_secs, abs nb_new_clients_per_secs) +
     abs(pred_2_nb_new_clients_per_secs - nb_new_clients_per_secs) /
       max(abs pred_2_nb_new_clients_per_secs, abs nb_new_clients_per_secs) +
     abs(pred_1_nb_new_clients_per_secs - nb_new_clients_per_secs) /
       max(abs pred_1_nb_new_clients_per_secs, abs nb_new_clients_per_secs) +
     abs(pred_0_nb_new_clients_per_secs - nb_new_clients_per_secs) /
       max(abs pred_0_nb_new_clients_per_secs, abs nb_new_clients_per_secs)) / 4 ELSE 0
        AS abnormality_nb_new_clients_per_secs;

DEFINE 'new peers: DDoS anomalies' AS
  FROM 'new peers: DDoS predictions'
  SELECT
    start,
    (abnormality_nb_new_clients_per_secs > 0.75 OR
     abnormality_nb_new_cnxs_per_secs > 0.75) AS abnormality,
    5-ma float(abnormality) AS _recent_abnormality,
    NOT (HYSTERESIS (_recent_abnormality, 3/5, 4/5)) AS firing
  NOTIFY "Possible DDoS detected" WITH
    "${firing}" AS firing,
    abs(_recent_abnormality - 3/5) AS certainty,
    "possible DDoS" AS desc
  AND KEEP ALL
  AFTER firing != COALESCE(previous.firing, false);
